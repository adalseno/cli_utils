{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CLI Utils Documentation","text":"<p>Welcome to CLI Utils - a modern CLI application designed to organize and manage your Python scripts for both local tasks and remote API interactions.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Modular Architecture: Easily add new commands by creating Python files in organized directories</li> <li>Auto-Discovery: Commands are automatically discovered and loaded from the commands directory</li> <li>Command Groups: Organize related commands into groups (e.g., text_utils, file_ops)</li> <li>Rich Output: Beautiful terminal output using Rich library</li> <li>Smart Icon System: Automatic Nerd Font detection with emoji and text fallbacks</li> <li>Type-Safe: Full type hints throughout the codebase</li> <li>Well-Tested: Comprehensive test suite with pytest</li> <li>Documented: Auto-generated API documentation from docstrings</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code># Convert text to uppercase\ncli-utils local text-utils uppercase \"hello world\"\n\n# Get help for any command\ncli-utils --help\ncli-utils local --help\ncli-utils local text-utils --help\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>cli_utils/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 cli_utils/\n\u2502   \u2502   \u251c\u2500\u2500 main.py           # Main entry point\n\u2502   \u2502   \u251c\u2500\u2500 config.py         # Configuration management\n\u2502   \u2502   \u251c\u2500\u2500 core/             # Core utilities\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 plugin_loader.py\n\u2502   \u2502   \u251c\u2500\u2500 commands/         # Command modules\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 local/        # Local task commands\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 text_utils/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 file_ops/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 system_info/\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 devtools/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 remote/       # Remote API commands\n\u2502   \u2502   \u2514\u2500\u2500 utils/            # Shared utilities\n\u2502   \u251c\u2500\u2500 docs/                 # Documentation\n\u2502   \u2514\u2500\u2500 tests/                # Test suite\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Installation Guide - Install CLI Utils on your system</li> <li>Command Reference - Complete documentation of all available commands</li> <li>Quick Start - Learn the basics in 5 minutes</li> <li>Examples - Detailed usage examples for each command group</li> </ol>"},{"location":"#design-philosophy","title":"Design Philosophy","text":"<p>CLI Utils is built with the following principles:</p> <ul> <li>Modularity: Each command is self-contained and independent</li> <li>Discoverability: Auto-load commands from directories without manual registration</li> <li>Type Safety: Full type hints for better IDE support and fewer bugs</li> <li>Documentation: Comprehensive docstrings on everything</li> <li>Testability: Easy to test individual components</li> <li>Extensibility: Simple to add new commands without modifying core code</li> </ul>"},{"location":"api/commands/","title":"Commands API Reference","text":""},{"location":"api/commands/#text-utils","title":"Text Utils","text":""},{"location":"api/commands/#uppercase","title":"Uppercase","text":""},{"location":"api/commands/#cli_utils.commands.local.text_utils.uppercase","title":"<code>uppercase</code>","text":"<p>Convert text to uppercase.</p> <p>This module provides a command to convert input text to uppercase.</p>"},{"location":"api/commands/#cli_utils.commands.local.text_utils.uppercase.uppercase","title":"<code>uppercase(text=typer.Argument(..., help='Text to convert to uppercase'), copy=typer.Option(False, '--copy', '-c', help='Copy result to clipboard'))</code>","text":"<p>Convert text to UPPERCASE.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert to uppercase</p> <code>Argument(..., help='Text to convert to uppercase')</code> <code>copy</code> <code>bool</code> <p>If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)</p> <code>Option(False, '--copy', '-c', help='Copy result to clipboard')</code> Example <p>$ cli-utils local text-utils uppercase \"hello world\" HELLO WORLD</p> <p>$ cli-utils local text-utils uppercase \"hello world\" --copy HELLO WORLD \u2713 Copied to clipboard</p> Source code in <code>src/cli_utils/commands/local/text_utils/uppercase.py</code> <pre><code>def uppercase(\n    text: str = typer.Argument(..., help=\"Text to convert to uppercase\"),\n    copy: bool = typer.Option(False, \"--copy\", \"-c\", help=\"Copy result to clipboard\"),\n) -&gt; None:\n    \"\"\"Convert text to UPPERCASE.\n\n    Args:\n        text: The text to convert to uppercase\n        copy: If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)\n\n    Example:\n        $ cli-utils local text-utils uppercase \"hello world\"\n        HELLO WORLD\n\n        $ cli-utils local text-utils uppercase \"hello world\" --copy\n        HELLO WORLD\n        \u2713 Copied to clipboard\n    \"\"\"\n    result = text.upper()\n\n    console.print(f\"[green]{result}[/green]\")\n\n    if copy:\n        copy_to_clipboard(result)\n</code></pre>"},{"location":"api/commands/#lowercase","title":"Lowercase","text":""},{"location":"api/commands/#cli_utils.commands.local.text_utils.lowercase","title":"<code>lowercase</code>","text":"<p>Convert text to lowercase.</p> <p>This module provides a command to convert input text to lowercase.</p>"},{"location":"api/commands/#cli_utils.commands.local.text_utils.lowercase.lowercase","title":"<code>lowercase(text=typer.Argument(..., help='Text to convert to lowercase'), copy=typer.Option(False, '--copy', '-c', help='Copy result to clipboard'))</code>","text":"<p>Convert text to lowercase.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert to lowercase</p> <code>Argument(..., help='Text to convert to lowercase')</code> <code>copy</code> <code>bool</code> <p>If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)</p> <code>Option(False, '--copy', '-c', help='Copy result to clipboard')</code> Example <p>$ cli-utils local text-utils lowercase \"HELLO WORLD\" hello world</p> <p>$ cli-utils local text-utils lowercase \"HELLO WORLD\" --copy hello world \u2713 Copied to clipboard</p> Source code in <code>src/cli_utils/commands/local/text_utils/lowercase.py</code> <pre><code>def lowercase(\n    text: str = typer.Argument(..., help=\"Text to convert to lowercase\"),\n    copy: bool = typer.Option(False, \"--copy\", \"-c\", help=\"Copy result to clipboard\"),\n) -&gt; None:\n    \"\"\"Convert text to lowercase.\n\n    Args:\n        text: The text to convert to lowercase\n        copy: If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)\n\n    Example:\n        $ cli-utils local text-utils lowercase \"HELLO WORLD\"\n        hello world\n\n        $ cli-utils local text-utils lowercase \"HELLO WORLD\" --copy\n        hello world\n        \u2713 Copied to clipboard\n    \"\"\"\n    result = text.lower()\n\n    console.print(f\"[green]{result}[/green]\")\n\n    if copy:\n        copy_to_clipboard(result)\n</code></pre>"},{"location":"api/commands/#titlecase","title":"Titlecase","text":""},{"location":"api/commands/#cli_utils.commands.local.text_utils.titlecase","title":"<code>titlecase</code>","text":"<p>Convert text to title case.</p> <p>This module provides a command to convert input text to title case.</p>"},{"location":"api/commands/#cli_utils.commands.local.text_utils.titlecase.titlecase","title":"<code>titlecase(text=typer.Argument(..., help='Text to convert to title case'), copy=typer.Option(False, '--copy', '-c', help='Copy result to clipboard'))</code>","text":"<p>Convert text to Title Case.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert to title case</p> <code>Argument(..., help='Text to convert to title case')</code> <code>copy</code> <code>bool</code> <p>If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)</p> <code>Option(False, '--copy', '-c', help='Copy result to clipboard')</code> Example <p>$ cli-utils local text-utils titlecase \"hello world\" Hello World</p> <p>$ cli-utils local text-utils titlecase \"hello world\" --copy Hello World \u2713 Copied to clipboard</p> Source code in <code>src/cli_utils/commands/local/text_utils/titlecase.py</code> <pre><code>def titlecase(\n    text: str = typer.Argument(..., help=\"Text to convert to title case\"),\n    copy: bool = typer.Option(False, \"--copy\", \"-c\", help=\"Copy result to clipboard\"),\n) -&gt; None:\n    \"\"\"Convert text to Title Case.\n\n    Args:\n        text: The text to convert to title case\n        copy: If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)\n\n    Example:\n        $ cli-utils local text-utils titlecase \"hello world\"\n        Hello World\n\n        $ cli-utils local text-utils titlecase \"hello world\" --copy\n        Hello World\n        \u2713 Copied to clipboard\n    \"\"\"\n    result = text.title()\n\n    console.print(f\"[green]{result}[/green]\")\n\n    if copy:\n        copy_to_clipboard(result)\n</code></pre>"},{"location":"api/config/","title":"Configuration Module","text":"<p>The configuration module handles all application settings and configuration management.</p>"},{"location":"api/config/#settings-class","title":"Settings Class","text":""},{"location":"api/config/#cli_utils.config.Settings","title":"<code>Settings</code>  <code>dataclass</code>","text":"<p>Application settings and configuration.</p> <p>Attributes:</p> Name Type Description <code>config_dir</code> <code>Path</code> <p>Directory for user configuration files</p> <code>log_level</code> <code>str</code> <p>Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</p> <code>api_timeout</code> <code>int</code> <p>Default timeout for API requests in seconds</p> <code>max_retries</code> <code>int</code> <p>Maximum number of retries for failed API requests</p> <code>nerd_font_support</code> <code>int</code> <p>Whether Nerd Fonts are installed (1=yes, 0=no)</p> <code>custom_config</code> <code>dict[str, Any]</code> <p>Additional custom configuration loaded from YAML</p> Source code in <code>src/cli_utils/config.py</code> <pre><code>@dataclass\nclass Settings:\n    \"\"\"Application settings and configuration.\n\n    Attributes:\n        config_dir: Directory for user configuration files\n        log_level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n        api_timeout: Default timeout for API requests in seconds\n        max_retries: Maximum number of retries for failed API requests\n        nerd_font_support: Whether Nerd Fonts are installed (1=yes, 0=no)\n        custom_config: Additional custom configuration loaded from YAML\n    \"\"\"\n\n    config_dir: Path = field(default_factory=lambda: Path.home() / \".config\" / \"cli_utils\")\n    log_level: str = \"INFO\"\n    api_timeout: int = 30\n    max_retries: int = 3\n    nerd_font_support: int = 0\n    custom_config: dict[str, Any] = field(default_factory=dict)\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Initialize configuration after dataclass creation.\"\"\"\n        # Ensure config directory exists\n        self.config_dir.mkdir(parents=True, exist_ok=True)\n\n        # Load environment variables from .env file\n        load_dotenv()\n\n        # Override with environment variables if present\n        self.log_level = os.getenv(\"CLI_UTILS_LOG_LEVEL\", self.log_level)\n        self.api_timeout = int(os.getenv(\"CLI_UTILS_API_TIMEOUT\", str(self.api_timeout)))\n        self.max_retries = int(os.getenv(\"CLI_UTILS_MAX_RETRIES\", str(self.max_retries)))\n\n        # Load custom configuration from YAML if exists\n        self._load_yaml_config()\n\n        # Check for Nerd Font support\n        self._detect_nerd_fonts()\n\n        # Initialize icon manager with detected Nerd Font support\n        self._init_icon_manager()\n\n    def _load_yaml_config(self) -&gt; None:\n        \"\"\"Load configuration from YAML file if it exists.\"\"\"\n        config_file = self.config_dir / \"config.yaml\"\n\n        if config_file.exists():\n            try:\n                with open(config_file, \"r\") as f:\n                    self.custom_config = yaml.safe_load(f) or {}\n            except yaml.YAMLError as e:\n                # If YAML is invalid, log warning but don't crash\n                print(f\"Warning: Could not load config from {config_file}: {e}\")\n                self.custom_config = {}\n\n    def get(self, key: str, default: Any = None) -&gt; Any:\n        \"\"\"Get a configuration value from custom config.\n\n        Args:\n            key: Configuration key (supports dot notation for nested keys)\n            default: Default value if key is not found\n\n        Returns:\n            Configuration value or default\n\n        Example:\n            &gt;&gt;&gt; settings.get(\"api.github.token\")\n            &gt;&gt;&gt; settings.get(\"features.enabled\", [])\n        \"\"\"\n        keys = key.split(\".\")\n        value = self.custom_config\n\n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n\n        return value\n\n    def save_config(self, config: dict[str, Any]) -&gt; None:\n        \"\"\"Save configuration to YAML file.\n\n        Args:\n            config: Configuration dictionary to save\n        \"\"\"\n        config_file = self.config_dir / \"config.yaml\"\n\n        try:\n            with open(config_file, \"w\") as f:\n                yaml.safe_dump(config, f, default_flow_style=False)\n        except Exception as e:\n            print(f\"Error saving config to {config_file}: {e}\")\n\n    def _detect_nerd_fonts(self) -&gt; None:\n        \"\"\"Detect if Nerd Fonts are installed and update configuration.\"\"\"\n        # First check if it's already set in custom config\n        config_value = self.get(\"display.nerd_font_support\")\n\n        if config_value is not None:\n            # Use the value from config file\n            self.nerd_font_support = int(config_value)\n        else:\n            # Auto-detect Nerd Fonts\n            self.nerd_font_support = check_nerd_fonts()\n\n            # Save the detected value to config for future use\n            if not self.custom_config:\n                self.custom_config = {}\n            if \"display\" not in self.custom_config:\n                self.custom_config[\"display\"] = {}\n            self.custom_config[\"display\"][\"nerd_font_support\"] = self.nerd_font_support\n            self.save_config(self.custom_config)\n\n    def _init_icon_manager(self) -&gt; None:\n        \"\"\"Initialize the global icon manager with detected Nerd Font support.\"\"\"\n        try:\n            from cli_utils.utils.icons import init_icon_manager\n            init_icon_manager(self.nerd_font_support)\n        except ImportError:\n            # Icon manager not available, skip initialization\n            pass\n</code></pre>"},{"location":"api/config/#cli_utils.config.Settings.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Initialize configuration after dataclass creation.</p> Source code in <code>src/cli_utils/config.py</code> <pre><code>def __post_init__(self) -&gt; None:\n    \"\"\"Initialize configuration after dataclass creation.\"\"\"\n    # Ensure config directory exists\n    self.config_dir.mkdir(parents=True, exist_ok=True)\n\n    # Load environment variables from .env file\n    load_dotenv()\n\n    # Override with environment variables if present\n    self.log_level = os.getenv(\"CLI_UTILS_LOG_LEVEL\", self.log_level)\n    self.api_timeout = int(os.getenv(\"CLI_UTILS_API_TIMEOUT\", str(self.api_timeout)))\n    self.max_retries = int(os.getenv(\"CLI_UTILS_MAX_RETRIES\", str(self.max_retries)))\n\n    # Load custom configuration from YAML if exists\n    self._load_yaml_config()\n\n    # Check for Nerd Font support\n    self._detect_nerd_fonts()\n\n    # Initialize icon manager with detected Nerd Font support\n    self._init_icon_manager()\n</code></pre>"},{"location":"api/config/#cli_utils.config.Settings.get","title":"<code>get(key, default=None)</code>","text":"<p>Get a configuration value from custom config.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Configuration key (supports dot notation for nested keys)</p> required <code>default</code> <code>Any</code> <p>Default value if key is not found</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>Configuration value or default</p> Example <p>settings.get(\"api.github.token\") settings.get(\"features.enabled\", [])</p> Source code in <code>src/cli_utils/config.py</code> <pre><code>def get(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get a configuration value from custom config.\n\n    Args:\n        key: Configuration key (supports dot notation for nested keys)\n        default: Default value if key is not found\n\n    Returns:\n        Configuration value or default\n\n    Example:\n        &gt;&gt;&gt; settings.get(\"api.github.token\")\n        &gt;&gt;&gt; settings.get(\"features.enabled\", [])\n    \"\"\"\n    keys = key.split(\".\")\n    value = self.custom_config\n\n    for k in keys:\n        if isinstance(value, dict) and k in value:\n            value = value[k]\n        else:\n            return default\n\n    return value\n</code></pre>"},{"location":"api/config/#cli_utils.config.Settings.save_config","title":"<code>save_config(config)</code>","text":"<p>Save configuration to YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any]</code> <p>Configuration dictionary to save</p> required Source code in <code>src/cli_utils/config.py</code> <pre><code>def save_config(self, config: dict[str, Any]) -&gt; None:\n    \"\"\"Save configuration to YAML file.\n\n    Args:\n        config: Configuration dictionary to save\n    \"\"\"\n    config_file = self.config_dir / \"config.yaml\"\n\n    try:\n        with open(config_file, \"w\") as f:\n            yaml.safe_dump(config, f, default_flow_style=False)\n    except Exception as e:\n        print(f\"Error saving config to {config_file}: {e}\")\n</code></pre>"},{"location":"api/config/#functions","title":"Functions","text":""},{"location":"api/config/#cli_utils.config.get_settings","title":"<code>get_settings()</code>","text":"<p>Get the global settings instance.</p> <p>Returns:</p> Type Description <code>Settings</code> <p>Settings instance (creates one if it doesn't exist)</p> Source code in <code>src/cli_utils/config.py</code> <pre><code>def get_settings() -&gt; Settings:\n    \"\"\"Get the global settings instance.\n\n    Returns:\n        Settings instance (creates one if it doesn't exist)\n    \"\"\"\n    global _settings\n    if _settings is None:\n        _settings = Settings()\n    return _settings\n</code></pre>"},{"location":"api/config/#cli_utils.config.reset_settings","title":"<code>reset_settings()</code>","text":"<p>Reset the global settings instance (useful for testing).</p> Source code in <code>src/cli_utils/config.py</code> <pre><code>def reset_settings() -&gt; None:\n    \"\"\"Reset the global settings instance (useful for testing).\"\"\"\n    global _settings\n    _settings = None\n</code></pre>"},{"location":"api/core/","title":"Core Module","text":"<p>The core module provides essential functionality for the CLI Utils application.</p>"},{"location":"api/core/#plugin-loader","title":"Plugin Loader","text":""},{"location":"api/core/#cli_utils.core.plugin_loader","title":"<code>plugin_loader</code>","text":"<p>Plugin loader for dynamically discovering and loading commands.</p> <p>This module provides functionality to automatically discover and load command modules from the commands directory, organizing them into groups (local/remote) and sub-groups (text_utils, file_ops, etc.).</p>"},{"location":"api/core/#cli_utils.core.plugin_loader.PluginLoader","title":"<code>PluginLoader</code>","text":"<p>Loads and registers commands from the commands directory.</p> <p>Attributes:</p> Name Type Description <code>commands_dir</code> <p>Path to the commands directory</p> <code>app</code> <p>Main Typer application instance</p> Source code in <code>src/cli_utils/core/plugin_loader.py</code> <pre><code>class PluginLoader:\n    \"\"\"Loads and registers commands from the commands directory.\n\n    Attributes:\n        commands_dir: Path to the commands directory\n        app: Main Typer application instance\n    \"\"\"\n\n    def __init__(self, commands_dir: Path, app: typer.Typer) -&gt; None:\n        \"\"\"Initialize the plugin loader.\n\n        Args:\n            commands_dir: Path to the commands directory\n            app: Main Typer application instance\n        \"\"\"\n        self.commands_dir = commands_dir\n        self.app = app\n        self.loaded_commands: dict[str, int] = {}\n\n    def load_all_commands(self) -&gt; None:\n        \"\"\"Discover and load all commands from the commands directory.\n\n        This method scans the commands directory structure:\n        - commands/local/text_utils/*.py\n        - commands/local/file_ops/*.py\n        - commands/remote/api_example/*.py\n\n        And automatically registers them with Typer.\n        \"\"\"\n        if not self.commands_dir.exists():\n            console.print(f\"[yellow]Warning: Commands directory not found: {self.commands_dir}[/yellow]\")\n            return\n\n        # Load commands from 'local' and 'remote' groups\n        for category in [\"local\", \"remote\"]:\n            category_path = self.commands_dir / category\n            if category_path.exists() and category_path.is_dir():\n                self._load_category(category, category_path)\n\n        # Print summary\n        total = sum(self.loaded_commands.values())\n        if total &gt; 0:\n            console.print(f\"[green]\u2713 Loaded {total} commands[/green]\")\n\n    def _load_category(self, category_name: str, category_path: Path) -&gt; None:\n        \"\"\"Load all command groups from a category (local or remote).\n\n        Args:\n            category_name: Name of the category (e.g., 'local', 'remote')\n            category_path: Path to the category directory\n        \"\"\"\n        # Create a sub-app for this category\n        category_app = typer.Typer(\n            name=category_name,\n            help=f\"{category_name.capitalize()} commands\",\n            no_args_is_help=True,\n        )\n\n        command_count = 0\n\n        # Iterate through command groups (subdirectories)\n        for group_path in category_path.iterdir():\n            if group_path.is_dir() and not group_path.name.startswith(\"_\"):\n                group_count = self._load_command_group(category_name, group_path, category_app)\n                command_count += group_count\n\n        # Only add the category if it has commands\n        if command_count &gt; 0:\n            self.app.add_typer(category_app, name=category_name)\n            self.loaded_commands[category_name] = command_count\n\n    def _load_command_group(self, category_name: str, group_path: Path, parent_app: typer.Typer) -&gt; int:\n        \"\"\"Load all commands from a command group directory.\n\n        Args:\n            category_name: Name of the category (e.g., 'local', 'remote')\n            group_path: Path to the command group directory\n            parent_app: Parent Typer application to register commands to\n\n        Returns:\n            Number of commands loaded from this group\n        \"\"\"\n        group_name = group_path.name\n        command_count = 0\n\n        # Create a sub-app for this command group\n        group_app = typer.Typer(\n            name=group_name,\n            help=f\"{group_name.replace('_', ' ').title()} commands\",\n            no_args_is_help=True,\n        )\n\n        # Load all Python files in this group\n        for py_file in group_path.glob(\"*.py\"):\n            if py_file.name.startswith(\"_\"):\n                continue\n\n            try:\n                # Import the module\n                module_name = f\"cli_utils.commands.{category_name}.{group_name}.{py_file.stem}\"\n                module = importlib.import_module(module_name)\n\n                # Look for Typer commands in the module\n                for _name, obj in inspect.getmembers(module):\n                    if self._is_typer_command(obj):\n                        # Register the command\n                        group_app.command()(obj)\n                        command_count += 1\n                    elif isinstance(obj, typer.Typer):\n                        # If the module exports a Typer app, add it\n                        parent_app.add_typer(obj, name=py_file.stem)\n                        command_count += 1\n\n            except Exception as e:\n                console.print(f\"[red]Error loading {py_file}: {e}[/red]\")\n\n        # Only add the group if it has commands\n        if command_count &gt; 0:\n            parent_app.add_typer(group_app, name=group_name)\n\n        return command_count\n\n    @staticmethod\n    def _is_typer_command(obj: Any) -&gt; bool:\n        \"\"\"Check if an object is a Typer command function.\n\n        Args:\n            obj: Object to check\n\n        Returns:\n            True if the object is a Typer command function\n        \"\"\"\n        return (\n            callable(obj)\n            and not inspect.isclass(obj)\n            and not obj.__name__.startswith(\"_\")\n            and inspect.isfunction(obj)\n            and obj.__module__.startswith(\"cli_utils.commands\")\n        )\n</code></pre>"},{"location":"api/core/#cli_utils.core.plugin_loader.PluginLoader.__init__","title":"<code>__init__(commands_dir, app)</code>","text":"<p>Initialize the plugin loader.</p> <p>Parameters:</p> Name Type Description Default <code>commands_dir</code> <code>Path</code> <p>Path to the commands directory</p> required <code>app</code> <code>Typer</code> <p>Main Typer application instance</p> required Source code in <code>src/cli_utils/core/plugin_loader.py</code> <pre><code>def __init__(self, commands_dir: Path, app: typer.Typer) -&gt; None:\n    \"\"\"Initialize the plugin loader.\n\n    Args:\n        commands_dir: Path to the commands directory\n        app: Main Typer application instance\n    \"\"\"\n    self.commands_dir = commands_dir\n    self.app = app\n    self.loaded_commands: dict[str, int] = {}\n</code></pre>"},{"location":"api/core/#cli_utils.core.plugin_loader.PluginLoader.load_all_commands","title":"<code>load_all_commands()</code>","text":"<p>Discover and load all commands from the commands directory.</p> <p>This method scans the commands directory structure: - commands/local/text_utils/.py - commands/local/file_ops/.py - commands/remote/api_example/*.py</p> <p>And automatically registers them with Typer.</p> Source code in <code>src/cli_utils/core/plugin_loader.py</code> <pre><code>def load_all_commands(self) -&gt; None:\n    \"\"\"Discover and load all commands from the commands directory.\n\n    This method scans the commands directory structure:\n    - commands/local/text_utils/*.py\n    - commands/local/file_ops/*.py\n    - commands/remote/api_example/*.py\n\n    And automatically registers them with Typer.\n    \"\"\"\n    if not self.commands_dir.exists():\n        console.print(f\"[yellow]Warning: Commands directory not found: {self.commands_dir}[/yellow]\")\n        return\n\n    # Load commands from 'local' and 'remote' groups\n    for category in [\"local\", \"remote\"]:\n        category_path = self.commands_dir / category\n        if category_path.exists() and category_path.is_dir():\n            self._load_category(category, category_path)\n\n    # Print summary\n    total = sum(self.loaded_commands.values())\n    if total &gt; 0:\n        console.print(f\"[green]\u2713 Loaded {total} commands[/green]\")\n</code></pre>"},{"location":"api/core/#cli_utils.core.plugin_loader.create_plugin_loader","title":"<code>create_plugin_loader(app)</code>","text":"<p>Create and return a plugin loader instance.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Typer</code> <p>Main Typer application instance</p> required <p>Returns:</p> Type Description <code>PluginLoader</code> <p>Configured PluginLoader instance</p> Source code in <code>src/cli_utils/core/plugin_loader.py</code> <pre><code>def create_plugin_loader(app: typer.Typer) -&gt; PluginLoader:\n    \"\"\"Create and return a plugin loader instance.\n\n    Args:\n        app: Main Typer application instance\n\n    Returns:\n        Configured PluginLoader instance\n    \"\"\"\n    # Get the commands directory path\n    base_dir = Path(__file__).parent.parent\n    commands_dir = base_dir / \"commands\"\n\n    return PluginLoader(commands_dir, app)\n</code></pre>"},{"location":"examples/api-commands/","title":"API Commands Examples","text":"<p>This guide shows how to create and use commands that interact with remote APIs.</p>"},{"location":"examples/api-commands/#weather-api-example","title":"Weather API Example","text":"<p>A simple example command that fetches weather data from the Open-Meteo API.</p>"},{"location":"examples/api-commands/#basic-usage","title":"Basic Usage","text":"<p>Get weather information for a city:</p> <pre><code>cli-utils remote api-example weather milan\n</code></pre> <p>Output: <pre><code>{'latitude': 45.48, 'longitude': 9.199999, 'generationtime_ms': 0.004291534423828125,\n'utc_offset_seconds': 0, 'timezone': 'GMT', 'timezone_abbreviation': 'GMT', 'elevation': 128.0}\n</code></pre></p>"},{"location":"examples/api-commands/#copy-to-clipboard","title":"Copy to Clipboard","text":"<p>Copy the result to your clipboard:</p> <pre><code>cli-utils remote api-example weather milan --copy\n# or use the short flag\ncli-utils remote api-example weather milan -c\n</code></pre> <p>The JSON output will be formatted and copied to your clipboard, ready to paste into other applications.</p>"},{"location":"examples/api-commands/#available-cities","title":"Available Cities","text":"<p>The example currently supports: - <code>mellieha</code> - Mellieha, Malta - <code>milan</code> - Milan, Italy - <code>paris</code> - Paris, France</p>"},{"location":"examples/api-commands/#how-it-works","title":"How It Works","text":"<p>This example demonstrates: 1. Making API requests - Using the <code>requests</code> library to fetch data 2. Parsing JSON responses - Converting API responses to Python dictionaries 3. Clipboard integration - Using the <code>copy_to_clipboard</code> utility 4. Rich console output - Displaying colored output with Rich</p>"},{"location":"examples/api-commands/#source-code","title":"Source Code","text":"<p>Location: <code>src/cli_utils/commands/remote/api_example/weather.py</code></p> <pre><code>\"\"\"Get weather for a specific city.\"\"\"\n\nimport requests\nimport typer\nfrom rich.console import Console\n\nfrom cli_utils.utils.clipboard import copy_to_clipboard\n\nconsole = Console()\n\ndef weather(\n    city: str = typer.Argument(..., help=\"City to get weather for\"),\n    copy: bool = typer.Option(False, \"--copy\", \"-c\", help=\"Copy result to clipboard\"),\n) -&gt; None:\n    \"\"\"Get city weather.\n\n    Example:\n        $ cli-utils remote api-example weather milan\n        $ cli-utils remote api-example weather milan --copy\n    \"\"\"\n    cities = {\n        \"mellieha\": {\"latitude\": \"35.57\", \"longitude\": \"14.21\"},\n        \"milan\": {\"latitude\": \"45.47\", \"longitude\": \"9.19\"},\n        \"paris\": {\"latitude\": \"48.86\", \"longitude\": \"2.35\"},\n    }\n\n    if city.lower() in cities:\n        url = f\"https://api.open-meteo.com/v1/forecast?latitude={cities[city]['latitude']}&amp;longitude={cities[city]['longitude']}\"\n\n        response = requests.get(url)\n        result = response.json()\n\n        console.print(f\"[green]{result}[/green]\")\n\n        if copy:\n            import json\n            copy_to_clipboard(json.dumps(result, indent=2))\n    else:\n        console.print(f\"[red]City {city} not found[/red]\")\n</code></pre>"},{"location":"examples/api-commands/#creating-an-api-command","title":"Creating an API Command","text":"<p>Here's a template for creating API commands:</p> <pre><code># src/cli_utils/commands/remote/github/user_info.py\n\"\"\"Fetch GitHub user information.\"\"\"\n\nimport typer\nimport requests\nfrom rich.console import Console\nfrom rich.table import Table\n\nfrom cli_utils.config import get_settings\n\nconsole = Console()\n\n\ndef user_info(\n    username: str = typer.Argument(..., help=\"GitHub username\"),\n) -&gt; None:\n    \"\"\"Fetch and display GitHub user information.\n\n    Args:\n        username: GitHub username to look up\n\n    Example:\n        $ cli-utils remote github user-info octocat\n    \"\"\"\n    settings = get_settings()\n    timeout = settings.api_timeout\n\n    try:\n        response = requests.get(\n            f\"https://api.github.com/users/{username}\",\n            timeout=timeout,\n        )\n        response.raise_for_status()\n\n        data = response.json()\n\n        # Display in a nice table\n        table = Table(title=f\"GitHub User: {username}\")\n        table.add_column(\"Field\", style=\"cyan\")\n        table.add_column(\"Value\", style=\"green\")\n\n        table.add_row(\"Name\", data.get(\"name\", \"N/A\"))\n        table.add_row(\"Bio\", data.get(\"bio\", \"N/A\"))\n        table.add_row(\"Public Repos\", str(data.get(\"public_repos\", 0)))\n        table.add_row(\"Followers\", str(data.get(\"followers\", 0)))\n\n        console.print(table)\n\n    except requests.RequestException as e:\n        console.print(f\"[red]Error: {e}[/red]\")\n        raise typer.Exit(1)\n</code></pre>"},{"location":"examples/api-commands/#authentication","title":"Authentication","text":"<p>For APIs requiring authentication:</p> <pre><code>def authenticated_api(\n    endpoint: str = typer.Argument(..., help=\"API endpoint\"),\n) -&gt; None:\n    \"\"\"Make authenticated API request.\"\"\"\n    settings = get_settings()\n\n    # Get API token from config\n    api_token = settings.get(\"api.service_name.token\")\n\n    if not api_token:\n        console.print(\"[red]Error: API token not configured[/red]\")\n        console.print(\"Add it to ~/.config/cli-utils/config.yaml:\")\n        console.print(\"api:\\n  service_name:\\n    token: your_token_here\")\n        raise typer.Exit(1)\n\n    headers = {\"Authorization\": f\"Bearer {api_token}\"}\n\n    response = requests.get(\n        endpoint,\n        headers=headers,\n        timeout=settings.api_timeout,\n    )\n    # ... handle response\n</code></pre>"},{"location":"examples/api-commands/#error-handling","title":"Error Handling","text":"<p>Always handle common API errors:</p> <pre><code>try:\n    response = requests.get(url, timeout=timeout)\n    response.raise_for_status()\n\nexcept requests.Timeout:\n    console.print(\"[red]Error: Request timed out[/red]\")\n    raise typer.Exit(1)\n\nexcept requests.HTTPError as e:\n    if e.response.status_code == 404:\n        console.print(\"[red]Error: Resource not found[/red]\")\n    elif e.response.status_code == 401:\n        console.print(\"[red]Error: Unauthorized - check your API key[/red]\")\n    else:\n        console.print(f\"[red]HTTP Error: {e}[/red]\")\n    raise typer.Exit(1)\n\nexcept requests.RequestException as e:\n    console.print(f\"[red]Error: {e}[/red]\")\n    raise typer.Exit(1)\n</code></pre>"},{"location":"examples/api-commands/#retry-logic","title":"Retry Logic","text":"<p>For flaky APIs, implement retry logic:</p> <pre><code>from cli_utils.config import get_settings\n\ndef fetch_with_retry(url: str) -&gt; dict:\n    \"\"\"Fetch URL with retry logic.\"\"\"\n    settings = get_settings()\n    max_retries = settings.max_retries\n\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, timeout=settings.api_timeout)\n            response.raise_for_status()\n            return response.json()\n\n        except requests.RequestException as e:\n            if attempt == max_retries - 1:\n                raise\n            console.print(f\"[yellow]Retry {attempt + 1}/{max_retries}...[/yellow]\")\n</code></pre>"},{"location":"examples/api-commands/#best-practices","title":"Best Practices","text":"<ol> <li>Use timeouts: Always set a timeout for requests</li> <li>Handle errors: Provide clear error messages</li> <li>Use configuration: Store API keys in config, not code</li> <li>Respect rate limits: Add delays if needed</li> <li>Show progress: Use Rich progress bars for long operations</li> <li>Validate input: Check parameters before making requests</li> <li>Cache when appropriate: Consider caching API responses</li> </ol>"},{"location":"examples/api-commands/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Configuration</li> <li>See how to Add Commands</li> </ul>"},{"location":"examples/clipboard/","title":"Clipboard Support in CLI Utils","text":"<p>\u2705 Status: Fully working with xclip, xsel, and wl-clipboard!</p>"},{"location":"examples/clipboard/#understanding-linux-clipboards","title":"Understanding Linux Clipboards","text":"<p>Linux has multiple clipboard mechanisms, which can be confusing:</p>"},{"location":"examples/clipboard/#x11-clipboards","title":"X11 Clipboards","text":"<ol> <li>PRIMARY - Selection clipboard (middle-click paste)</li> <li>Content: Whatever you select with mouse</li> <li>Paste: Middle mouse button</li> <li> <p>Tools: <code>xclip</code>, <code>xsel</code></p> </li> <li> <p>CLIPBOARD - Standard clipboard (Ctrl+C/V)</p> </li> <li>Content: Explicitly copied with Ctrl+C</li> <li>Paste: Ctrl+V (or Ctrl+Shift+V in terminals)</li> <li> <p>Tools: <code>xclip -selection clipboard</code>, <code>xsel --clipboard</code></p> </li> <li> <p>SECONDARY - Rarely used</p> </li> </ol>"},{"location":"examples/clipboard/#wayland-clipboard","title":"Wayland Clipboard","text":"<ul> <li>Simpler: One clipboard</li> <li>Tool: <code>wl-clipboard</code> (<code>wl-copy</code> / <code>wl-paste</code>)</li> </ul>"},{"location":"examples/clipboard/#how-cli-utils-handles-clipboard","title":"How CLI Utils Handles Clipboard","text":"<p>The <code>--copy</code> flag attempts to copy in this order:</p> <ol> <li>Wayland: <code>wl-copy</code> (if on Wayland)</li> <li>X11: <code>xclip -selection clipboard</code> \u2705</li> <li>X11: <code>xsel --clipboard --input</code> \u2705</li> <li>Fallback: <code>pyperclip</code> (Python package)</li> </ol> <p>The implementation uses <code>subprocess.Popen</code> to run clipboard tools in the background, since xclip and xsel stay running to serve clipboard requests (this is normal behavior).</p>"},{"location":"examples/clipboard/#current-limitations","title":"Current Limitations","text":""},{"location":"examples/clipboard/#sshremote-sessions","title":"SSH/Remote Sessions","text":"<p>Problem: X clipboard tools require a display server.</p> <p>Symptoms: <pre><code>cli-utils local text_utils uppercase \"test\" --copy\n# Output: Warning: No display available (SSH/headless session)\n</code></pre></p> <p>Solutions: - Use SSH with X forwarding: <code>ssh -X user@host</code> - Copy output manually: <code>cli-utils local text_utils uppercase \"test\" | xclip -selection clipboard</code> - Use without <code>--copy</code>: <code>cli-utils local text_utils uppercase \"test\"</code></p>"},{"location":"examples/clipboard/#terminal-clipboard-vs-x-clipboard","title":"Terminal Clipboard vs X Clipboard","text":"<p>Problem: Terminal emulators often have their own clipboard.</p> <p>Example: <pre><code>echo \"test\" | xclip -selection clipboard\n# Then try Ctrl+Shift+V in terminal - might not work!\n# But works in GUI apps (browser, editor, etc.)\n</code></pre></p> <p>Why: Some terminals use GTK/Qt clipboard, not X clipboard directly.</p> <p>Solution: Use the output directly instead: <pre><code># Instead of copying, save to variable\nRESULT=$(cli-utils local text_utils uppercase \"hello\")\necho $RESULT\n</code></pre></p>"},{"location":"examples/clipboard/#working-examples","title":"Working Examples","text":""},{"location":"examples/clipboard/#1-using-copy-flag-recommended","title":"1. Using --copy Flag (Recommended!)","text":"<pre><code># Copy to clipboard automatically\ncli-utils local text_utils uppercase \"hello world\" --copy\n# \u2713 Copied to clipboard (xclip)\n\n# Verify it worked\nxclip -selection clipboard -o\n# Output: HELLO WORLD\n\n# Now paste in GUI apps with Ctrl+V\n</code></pre>"},{"location":"examples/clipboard/#2-using-shell-shortcuts","title":"2. Using Shell Shortcuts","text":"<pre><code># With shortcuts (after make install-aliases)\ntextup \"hello world\" --copy\ntextlow \"HELLO WORLD\" --copy\ntexttitle \"hello world\" --copy\n</code></pre>"},{"location":"examples/clipboard/#3-manual-clipboard-alternative","title":"3. Manual Clipboard (Alternative)","text":"<pre><code># Pipe to xclip yourself\ncli-utils local text_utils uppercase \"hello world\" | xclip -selection clipboard\n</code></pre>"},{"location":"examples/clipboard/#3-variables-best-for-scripts","title":"3. Variables (Best for Scripts)","text":"<pre><code># Capture in variable\nUPPER=$(cli-utils local text_utils uppercase \"hello world\")\necho \"Result: $UPPER\"\n\n# Use in scripts\nprocess_text() {\n    local result=$(cli-utils local text_utils uppercase \"$1\")\n    echo \"$result\" &gt; output.txt\n}\n</code></pre>"},{"location":"examples/clipboard/#4-piping-most-flexible","title":"4. Piping (Most Flexible)","text":"<pre><code># Chain commands\ncli-utils local text_utils uppercase \"hello\" | grep \"HELLO\"\n\n# Save to file\ncli-utils local text_utils uppercase \"hello\" &gt; output.txt\n\n# Both display and save\ncli-utils local text_utils uppercase \"hello\" | tee output.txt\n</code></pre>"},{"location":"examples/clipboard/#testing-your-clipboard-setup","title":"Testing Your Clipboard Setup","text":""},{"location":"examples/clipboard/#check-display","title":"Check Display","text":"<pre><code>echo $DISPLAY\n# Should show something like :0 or :1\n# If empty, clipboard won't work\n</code></pre>"},{"location":"examples/clipboard/#test-xclip","title":"Test xclip","text":"<pre><code># Copy\necho \"test\" | xclip -selection clipboard\n\n# Paste (to verify)\nxclip -selection clipboard -o\n# Should output: test\n\n# Try in GUI app\n# Open browser/editor and press Ctrl+V\n</code></pre>"},{"location":"examples/clipboard/#test-wl-clipboard-wayland","title":"Test wl-clipboard (Wayland)","text":"<pre><code># Copy\necho \"test\" | wl-copy\n\n# Paste (to verify)\nwl-paste\n# Should output: test\n</code></pre>"},{"location":"examples/clipboard/#installation","title":"Installation","text":""},{"location":"examples/clipboard/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># X11\nsudo apt install xclip\n# or\nsudo apt install xsel\n\n# Wayland\nsudo apt install wl-clipboard\n</code></pre>"},{"location":"examples/clipboard/#fedora","title":"Fedora","text":"<pre><code># X11\nsudo dnf install xclip xsel\n\n# Wayland\nsudo dnf install wl-clipboard\n</code></pre>"},{"location":"examples/clipboard/#arch","title":"Arch","text":"<pre><code># X11\nsudo pacman -S xclip xsel\n\n# Wayland\nsudo pacman -S wl-clipboard\n</code></pre>"},{"location":"examples/clipboard/#recommended-approach","title":"Recommended Approach","text":"<p>For most use cases, don't use <code>--copy</code>. Instead:</p>"},{"location":"examples/clipboard/#for-terminal-use","title":"For Terminal Use","text":"<pre><code># Just view the output\ntextup \"hello world\"\n\n# Save to variable\nRESULT=$(textup \"hello world\")\n</code></pre>"},{"location":"examples/clipboard/#for-gui-use","title":"For GUI Use","text":"<pre><code># Output and manually copy\ntextup \"hello world\"\n# Then select with mouse and copy\n\n# Or pipe to xclip\ntextup \"hello world\" | xclip -selection clipboard\n</code></pre>"},{"location":"examples/clipboard/#for-scripts","title":"For Scripts","text":"<pre><code>#!/bin/bash\n# Process and save\nresult=$(cli-utils local text_utils uppercase \"$input\")\necho \"$result\" &gt; output.txt\n\n# Or use directly\ncli-utils local text_utils uppercase \"$input\" | some-other-command\n</code></pre>"},{"location":"examples/clipboard/#alternative-custom-clipboard-function","title":"Alternative: Custom Clipboard Function","text":"<p>Add to your <code>~/.zshrc</code>:</p> <pre><code># Copy command output to clipboard\ncup() {\n    \"$@\" | xclip -selection clipboard\n    echo \"Copied to clipboard!\"\n}\n\n# Usage\ncup textup \"hello world\"\ncup cli-utils local text_utils uppercase \"test\"\n</code></pre> <p>Or for Wayland:</p> <pre><code>cup() {\n    \"$@\" | wl-copy\n    echo \"Copied to clipboard!\"\n}\n</code></pre>"},{"location":"examples/clipboard/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/clipboard/#no-clipboard-tool-found","title":"\"No clipboard tool found\"","text":"<p>Solution: Install xclip <pre><code>sudo apt install xclip\n</code></pre></p>"},{"location":"examples/clipboard/#no-display-available","title":"\"No display available\"","text":"<p>Cause: SSH session without X forwarding</p> <p>Solutions: 1. Use SSH with X forwarding: <code>ssh -X user@host</code> 2. Don't use <code>--copy</code> flag 3. Pipe output manually: <code>... | xclip -selection clipboard</code></p>"},{"location":"examples/clipboard/#clipboard-works-but-paste-doesnt","title":"Clipboard works but paste doesn't","text":"<p>Cause: Terminal using different clipboard mechanism</p> <p>Test: <pre><code># Copy with xclip\necho \"test\" | xclip -selection clipboard\n\n# Try pasting in:\n# - GUI app (browser, text editor) - should work\n# - Terminal with Ctrl+Shift+V - might not work\n</code></pre></p> <p>Solution: Use GUI apps or pipe output directly</p>"},{"location":"examples/clipboard/#xclip-hangstimes-out","title":"xclip hangs/times out","text":"<p>Cause: No X display or display not accessible</p> <p>Check: <pre><code>echo $DISPLAY\nxdpyinfo\n</code></pre></p>"},{"location":"examples/clipboard/#best-practices","title":"Best Practices","text":"<ol> <li>\u2705 Use output directly - Most reliable</li> <li>\u2705 Save to variables - For scripts</li> <li>\u2705 Pipe to files - For persistence</li> <li>\u26a0\ufe0f Use <code>--copy</code> sparingly - Environment-dependent</li> <li>\u26a0\ufe0f Test your clipboard - Before relying on it</li> </ol>"},{"location":"examples/clipboard/#summary","title":"Summary","text":"<p>The <code>--copy</code> flag is a convenience feature that works best in GUI environments. For most CLI use cases, piping, variables, or manual copying are more reliable.</p> <p>Recommended workflow: <pre><code># Quick view\ntextup \"hello\"\n\n# Use in script\nRESULT=$(textup \"hello\")\n\n# Save to file\ntextup \"hello\" &gt; output.txt\n\n# Manual copy (most reliable)\ntextup \"hello\"\n# Then select and Ctrl+Shift+C\n</code></pre></p>"},{"location":"examples/devtools/","title":"Devtools Examples","text":"<p>The devtools group provides commands for analyzing and reporting on Python codebases.</p>"},{"location":"examples/devtools/#code-report","title":"Code Report","text":"<p>Analyze Python files in a directory and generate reports with code metrics.</p>"},{"location":"examples/devtools/#count-tests","title":"Count Tests","text":"<p>Count test functions in Python test files and get a summary of test coverage.</p>"},{"location":"examples/devtools/#basic-usage","title":"Basic Usage","text":"<p>Analyze the current directory:</p> <pre><code>cli-utils local devtools code-report .\n</code></pre> <p>Output: <pre><code>\u251c\u2500\u2500 analyze_file.py          (  150 lines, 2 classes, 3 functions, 8 methods, 15.2% of total)\n    - FileAnalyzer: 5 methods\n    - CodeMetrics: 3 methods\n\u251c\u2500\u2500 gather_reports.py        (  120 lines, 1 classes, 5 functions, 4 methods, 12.1% of total)\n    - ReportGatherer: 4 methods\n\u2514\u2500\u2500 utils.py                 (  200 lines, 3 classes, 2 functions, 10 methods, 20.2% of total)\n    - TextFormatter: 4 methods\n    - JsonFormatter: 3 methods\n    - MarkdownFormatter: 3 methods\n\nTotal:\n  Files     : 3\n  Lines     : 470\n  Classes   : 6\n  Functions : 10\n  Methods   : 22\n</code></pre></p>"},{"location":"examples/devtools/#analyze-specific-directory","title":"Analyze Specific Directory","text":"<pre><code>cli-utils local devtools code-report src/cli_utils\n</code></pre>"},{"location":"examples/devtools/#recursive-analysis","title":"Recursive Analysis","text":"<p>Search subdirectories recursively:</p> <pre><code>cli-utils local devtools code-report . --recursive\n# or use the short flag\ncli-utils local devtools code-report . -r\n</code></pre>"},{"location":"examples/devtools/#interactive-directory-selection","title":"Interactive Directory Selection","text":"<p>Use the <code>--browse</code> flag to select a directory interactively using your terminal file manager (Yazi or Midnight Commander):</p> <pre><code># Browse for directory using file manager\ncli-utils local devtools code-report --browse\n\n# Browse and analyze recursively\ncli-utils local devtools code-report --browse --recursive\n\n# Browse and output as JSON\ncli-utils local devtools code-report --browse --format json\n\n# Short flags\ncli-utils local devtools code-report -b -r -f json\n</code></pre> <p>The command will: 1. Auto-detect available file managers (tries Yazi first, then Midnight Commander, Ranger, or lf) 2. Open the file manager starting at the current directory (or specified directory) 3. Let you navigate and select a directory 4. Analyze the selected directory</p> <p>Supported file managers: - Yazi (preferred) - Modern, fast terminal file manager - Midnight Commander (mc) - Classic dual-pane file manager - Ranger - Vim-like file manager - lf - Simple terminal file manager</p>"},{"location":"examples/devtools/#output-formats","title":"Output Formats","text":""},{"location":"examples/devtools/#json-format","title":"JSON Format","text":"<p>Get structured JSON output for programmatic use:</p> <pre><code>cli-utils local devtools code-report . --format json\n</code></pre> <p>Output: <pre><code>{\n  \"total_files\": 3,\n  \"total_lines\": 470,\n  \"total_classes\": 6,\n  \"total_functions\": 10,\n  \"total_methods\": 22,\n  \"files\": [\n    {\n      \"file\": \"analyze_file.py\",\n      \"path\": \"/home/user/project/analyze_file.py\",\n      \"lines\": 150,\n      \"classes\": 2,\n      \"functions\": 3,\n      \"methods\": 8,\n      \"percent\": 15.2,\n      \"class_methods\": {\n        \"FileAnalyzer\": 5,\n        \"CodeMetrics\": 3\n      }\n    }\n  ]\n}\n</code></pre></p>"},{"location":"examples/devtools/#markdown-format","title":"Markdown Format","text":"<p>Generate markdown tables for documentation:</p> <pre><code>cli-utils local devtools code-report . --format markdown\n</code></pre> <p>Output: <pre><code>| File | Lines | Classes | Functions | Methods | % of Total |\n|------|-------|---------|-----------|---------|------------|\n| `analyze_file.py` | 150 | 2 | 3 | 8 | 15.2% |\n| `gather_reports.py` | 120 | 1 | 5 | 4 | 12.1% |\n| `utils.py` | 200 | 3 | 2 | 10 | 20.2% |\n\n**Total:**\n- Files: 3\n- Lines: 470\n- Classes: 6\n- Functions: 10\n- Methods: 22\n</code></pre></p>"},{"location":"examples/devtools/#saving-output-to-file","title":"Saving Output to File","text":"<p>Save the report to a file instead of printing to the console:</p> <pre><code># Save to a specific file path\ncli-utils local devtools code-report . --output report.txt\n\n# Save JSON output\ncli-utils local devtools code-report . --format json --output metrics.json\n\n# Save markdown report\ncli-utils local devtools code-report . --format markdown --output code-metrics.md\n</code></pre>"},{"location":"examples/devtools/#interactive-file-save-with-browse","title":"Interactive File Save with Browse","text":"<p>Use <code>browse</code> as the output value to select the save location interactively with your file manager:</p> <pre><code># Browse for save location (will suggest appropriate extension based on format)\ncli-utils local devtools code-report . --output browse\n\n# Browse for directory to analyze AND save location\ncli-utils local devtools code-report --browse --format json --output browse\n\n# Short flags\ncli-utils local devtools code-report -b -f json -o browse\n</code></pre> <p>When you use <code>--output browse</code>, the file manager will open and let you navigate to the directory where you want to save the file. The default filename will be set based on the format: - <code>code_report.txt</code> for text format - <code>code_report.json</code> for JSON format - <code>code_report.md</code> for markdown format</p> <p>You can navigate to your desired directory and press Enter to save with the default filename, or you can also rename the file manually after saving.</p>"},{"location":"examples/devtools/#short-flags","title":"Short Flags","text":"<p>Use short flags for convenience:</p> <pre><code># Recursive with JSON output\ncli-utils local devtools code-report . -r -f json\n\n# Markdown format\ncli-utils local devtools code-report src -f markdown\n\n# Browse interactively with recursive analysis\ncli-utils local devtools code-report -b -r\n\n# Browse with JSON output\ncli-utils local devtools code-report -b -f json\n\n# Save output to file with short flag\ncli-utils local devtools code-report . -o report.txt\n</code></pre>"},{"location":"examples/devtools/#use-cases","title":"Use Cases","text":""},{"location":"examples/devtools/#project-overview","title":"Project Overview","text":"<p>Get a quick overview of your project structure:</p> <pre><code>cli-utils local devtools code-report . --recursive\n</code></pre>"},{"location":"examples/devtools/#compare-directories","title":"Compare Directories","text":"<p>Compare code metrics between different parts of your project:</p> <pre><code># Analyze source code\ncli-utils local devtools code-report src --recursive\n\n# Analyze tests\ncli-utils local devtools code-report tests --recursive\n</code></pre>"},{"location":"examples/devtools/#generate-documentation","title":"Generate Documentation","text":"<p>Create markdown reports for project documentation:</p> <pre><code># Using output redirection\ncli-utils local devtools code-report src --format markdown &gt; docs/code-metrics.md\n\n# Using --output flag (recommended)\ncli-utils local devtools code-report src --format markdown --output docs/code-metrics.md\n\n# Interactive selection\ncli-utils local devtools code-report src --format markdown --output browse\n</code></pre>"},{"location":"examples/devtools/#cicd-integration","title":"CI/CD Integration","text":"<p>Use JSON output in CI/CD pipelines:</p> <pre><code># Generate metrics report using output redirection\ncli-utils local devtools code-report . -r -f json &gt; metrics.json\n\n# Generate metrics report using --output flag (recommended)\ncli-utils local devtools code-report . -r -f json --output metrics.json\n\n# Parse with jq\ncat metrics.json | jq '.total_lines'\n</code></pre>"},{"location":"examples/devtools/#code-review","title":"Code Review","text":"<p>Identify large files or complex modules:</p> <pre><code># Get JSON output\ncli-utils local devtools code-report src -r -f json | \\\n  jq '.files[] | select(.lines &gt; 200) | {file: .file, lines: .lines}'\n</code></pre>"},{"location":"examples/devtools/#pre-commit-hook","title":"Pre-commit Hook","text":"<p>Add code metrics to your pre-commit hooks:</p> <pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\necho \"Generating code metrics...\"\ncli-utils local devtools code-report src --recursive\n</code></pre>"},{"location":"examples/devtools/#whats-analyzed","title":"What's Analyzed","text":"<p>The code report analyzes:</p> <ul> <li>Lines: Meaningful lines (excluding blank lines and comments)</li> <li>Classes: Number of class definitions</li> <li>Functions: Standalone functions (not methods)</li> <li>Methods: Functions defined inside classes</li> <li>Class Methods: Breakdown of methods per class</li> <li>Percentage: Each file's contribution to total line count</li> </ul>"},{"location":"examples/devtools/#metrics-explained","title":"Metrics Explained","text":""},{"location":"examples/devtools/#meaningful-lines","title":"Meaningful Lines","text":"<p>The tool counts only meaningful lines of code, excluding: - Blank lines - Comment-only lines (starting with <code>#</code>)</p>"},{"location":"examples/devtools/#functions-vs-methods","title":"Functions vs Methods","text":"<ul> <li>Functions: Top-level functions or functions outside classes</li> <li>Methods: Functions defined inside class bodies</li> </ul>"},{"location":"examples/devtools/#class-method-breakdown","title":"Class Method Breakdown","text":"<p>For each class, the report shows how many methods it contains:</p> <pre><code>\u251c\u2500\u2500 utils.py                 (  200 lines, 3 classes, 2 functions, 10 methods, 20.2% of total)\n    - TextFormatter: 4 methods\n    - JsonFormatter: 3 methods\n    - MarkdownFormatter: 3 methods\n</code></pre>"},{"location":"examples/devtools/#tips","title":"Tips","text":"<ul> <li>Use <code>--recursive</code> to analyze entire project trees</li> <li>JSON format is great for automation and scripting</li> <li>Markdown format is perfect for documentation</li> <li>Combine with shell tools like <code>jq</code> for advanced filtering</li> <li>Add to your Makefile for quick project statistics</li> <li>Use <code>--browse</code> for quick interactive directory selection without typing paths</li> <li>The file manager integration works great over SSH connections</li> </ul>"},{"location":"examples/devtools/#count-tests_1","title":"Count Tests","text":"<p>The <code>count-tests</code> command scans test files and counts test functions and classes.</p>"},{"location":"examples/devtools/#basic-usage_1","title":"Basic Usage","text":"<p>Count tests in a directory:</p> <pre><code>cli-utils local devtools count-tests tests\n</code></pre> <p>Output: <pre><code>                  Test Count Summary\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 File                             \u2503 Tests \u2503 Classes \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 test_commands/test_text_utils.py \u2502     4 \u2502       0 \u2502\n\u2502 test_core/test_config.py         \u2502     4 \u2502       0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nTotals:\n  Files     : 2\n  Tests     : 8\n  Classes   : 0\n  Avg/File  : 4.0\n</code></pre></p>"},{"location":"examples/devtools/#recursive-scanning","title":"Recursive Scanning","text":"<p>Search subdirectories recursively:</p> <pre><code>cli-utils local devtools count-tests tests --recursive\n# Short flag\ncli-utils local devtools count-tests tests -r\n</code></pre>"},{"location":"examples/devtools/#verbose-mode","title":"Verbose Mode","text":"<p>Show individual test function names:</p> <pre><code>cli-utils local devtools count-tests tests -r -v\n</code></pre> <p>Output includes test names: <pre><code>Test Functions by File:\n\ntest_commands/test_text_utils.py\n  \u2022 test_uppercase_function\n  \u2022 test_lowercase_function\n  \u2022 test_titlecase_function\n  \u2022 test_uppercase_cli\n</code></pre></p>"},{"location":"examples/devtools/#custom-file-pattern","title":"Custom File Pattern","text":"<p>Match different test file naming conventions:</p> <pre><code># Default pattern: test_*.py\ncli-utils local devtools count-tests tests\n\n# Match *_test.py files\ncli-utils local devtools count-tests tests -p \"*_test.py\"\n\n# Match both patterns (use shell expansion)\ncli-utils local devtools count-tests tests -p \"**/*test*.py\"\n</code></pre>"},{"location":"examples/devtools/#interactive-directory-selection_1","title":"Interactive Directory Selection","text":"<p>Use the <code>--browse</code> flag with file manager:</p> <pre><code># Browse for test directory\ncli-utils local devtools count-tests --browse\n\n# Browse and scan recursively\ncli-utils local devtools count-tests -b -r\n\n# Browse with verbose output\ncli-utils local devtools count-tests -b -r -v\n</code></pre>"},{"location":"examples/devtools/#output-formats_1","title":"Output Formats","text":""},{"location":"examples/devtools/#table-format-default","title":"Table Format (Default)","text":"<pre><code>cli-utils local devtools count-tests tests -r\n</code></pre>"},{"location":"examples/devtools/#summary-format","title":"Summary Format","text":"<p>Compact summary without the table:</p> <pre><code>cli-utils local devtools count-tests tests -r -f summary\n</code></pre> <p>Output: <pre><code>Test Count Summary\n  Files     : 2\n  Tests     : 8\n  Classes   : 0\n  Avg/File  : 4.0\n</code></pre></p>"},{"location":"examples/devtools/#json-format_1","title":"JSON Format","text":"<p>For programmatic use:</p> <pre><code>cli-utils local devtools count-tests tests -r -f json\n</code></pre> <p>Output: <pre><code>{\n  \"summary\": {\n    \"total_files\": 2,\n    \"total_tests\": 8,\n    \"total_classes\": 0,\n    \"average_tests_per_file\": 4.0\n  },\n  \"files\": [\n    {\n      \"file\": \"test_commands/test_text_utils.py\",\n      \"path\": \"/path/to/test_text_utils.py\",\n      \"tests\": 4,\n      \"classes\": 0,\n      \"test_names\": [\n        \"test_uppercase_function\",\n        \"test_lowercase_function\",\n        \"test_titlecase_function\",\n        \"test_uppercase_cli\"\n      ],\n      \"class_names\": []\n    }\n  ]\n}\n</code></pre></p>"},{"location":"examples/devtools/#saving-output-to-file_1","title":"Saving Output to File","text":"<p>Save the test count report to a file:</p> <pre><code># Save to a specific file path\ncli-utils local devtools count-tests tests --output test_report.txt\n\n# Save JSON output\ncli-utils local devtools count-tests tests -r --format json --output test-report.json\n\n# Save summary format\ncli-utils local devtools count-tests tests -r --format summary --output summary.txt\n</code></pre>"},{"location":"examples/devtools/#interactive-file-save-with-browse_1","title":"Interactive File Save with Browse","text":"<p>Use <code>browse</code> as the output value to select the save location interactively:</p> <pre><code># Browse for save location (will suggest appropriate extension based on format)\ncli-utils local devtools count-tests tests --output browse\n\n# Browse for directory to analyze AND save location\ncli-utils local devtools count-tests --browse -r --format json --output browse\n\n# Short flags\ncli-utils local devtools count-tests -b -r -f json -o browse\n</code></pre> <p>When you use <code>--output browse</code>, the file manager will open and let you navigate to the directory where you want to save the file. The default filename will be set based on the format: - <code>test_count.txt</code> for table and summary formats - <code>test_count.json</code> for JSON format</p>"},{"location":"examples/devtools/#use-cases_1","title":"Use Cases","text":""},{"location":"examples/devtools/#cicd-integration_1","title":"CI/CD Integration","text":"<p>Check test coverage in CI:</p> <pre><code># Get test count as JSON using output redirection\ncli-utils local devtools count-tests tests -r -f json &gt; test-report.json\n\n# Get test count as JSON using --output flag (recommended)\ncli-utils local devtools count-tests tests -r -f json --output test-report.json\n\n# Parse with jq\nTOTAL_TESTS=$(cat test-report.json | jq '.summary.total_tests')\necho \"Total tests: $TOTAL_TESTS\"\n</code></pre>"},{"location":"examples/devtools/#pre-commit-hook_1","title":"Pre-commit Hook","text":"<p>Ensure tests are added:</p> <pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\nTEST_COUNT=$(cli-utils local devtools count-tests tests -r -f json | jq '.summary.total_tests')\nif [ \"$TEST_COUNT\" -lt 1 ]; then\n    echo \"Error: No tests found!\"\n    exit 1\nfi\n</code></pre>"},{"location":"examples/devtools/#compare-test-coverage","title":"Compare Test Coverage","text":"<p>Track test growth over time:</p> <pre><code># Before changes (using output redirection)\ncli-utils local devtools count-tests tests -r -f summary &gt; before.txt\n\n# Before changes (using --output flag, recommended)\ncli-utils local devtools count-tests tests -r -f summary --output before.txt\n\n# After changes\ncli-utils local devtools count-tests tests -r -f summary --output after.txt\n\n# Compare\ndiff before.txt after.txt\n</code></pre>"},{"location":"examples/devtools/#example-add-to-makefile","title":"Example: Add to Makefile","text":"<pre><code>.PHONY: code-metrics\ncode-metrics:\n    @echo \"Generating code metrics...\"\n    @cli-utils local devtools code-report src --recursive\n\n.PHONY: code-metrics-json\ncode-metrics-json:\n    @echo \"Generating code metrics JSON...\"\n    @cli-utils local devtools code-report src -r -f json --output metrics.json\n    @echo \"Metrics saved to metrics.json\"\n\n.PHONY: code-metrics-md\ncode-metrics-md:\n    @echo \"Generating code metrics markdown...\"\n    @cli-utils local devtools code-report src -r -f markdown --output docs/code-metrics.md\n    @echo \"Metrics saved to docs/code-metrics.md\"\n\n.PHONY: test-count\ntest-count:\n    @echo \"Counting tests...\"\n    @cli-utils local devtools count-tests tests --recursive\n\n.PHONY: test-count-verbose\ntest-count-verbose:\n    @cli-utils local devtools count-tests tests -r -v\n\n.PHONY: test-count-json\ntest-count-json:\n    @echo \"Generating test count JSON...\"\n    @cli-utils local devtools count-tests tests -r -f json --output test-report.json\n    @echo \"Test report saved to test-report.json\"\n</code></pre> <p>Then use: <pre><code>make code-metrics          # Display metrics in console\nmake code-metrics-json     # Save metrics as JSON\nmake code-metrics-md       # Save metrics as markdown\nmake test-count            # Display test count in console\nmake test-count-verbose    # Display with test names\nmake test-count-json       # Save test count as JSON\n</code></pre></p>"},{"location":"examples/icons/","title":"Icon System Guide","text":"<p>This guide explains how to use the intelligent icon system in CLI Utils, which provides automatic Nerd Font detection with smart fallback support.</p>"},{"location":"examples/icons/#overview","title":"Overview","text":"<p>CLI Utils includes a sophisticated icon system that automatically adapts to your terminal's capabilities:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Icon Selection Priority           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1. Nerd Font Icons (if installed)  \u2502\n\u2502    \u2514\u2500&gt; Best visual quality         \u2502\n\u2502                                      \u2502\n\u2502 2. Emoji Characters                \u2502\n\u2502    \u2514\u2500&gt; Good for modern terminals    \u2502\n\u2502                                      \u2502\n\u2502 3. Text Representation              \u2502\n\u2502    \u2514\u2500&gt; Works everywhere             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>This ensures your commands work beautifully on any system, regardless of font or terminal configuration!</p>"},{"location":"examples/icons/#quick-start","title":"Quick Start","text":""},{"location":"examples/icons/#basic-usage","title":"Basic Usage","text":"<p>The simplest way to use icons is through the <code>Icons</code> class:</p> <pre><code>from cli_utils.utils.icons import Icons\nfrom rich.console import Console\n\nconsole = Console()\n\ndef show_task_status():\n    \"\"\"Display task status with icons.\"\"\"\n    console.print(f\"{Icons.check()} Task completed successfully\")\n    console.print(f\"{Icons.cross()} Operation failed\")\n    console.print(f\"{Icons.warning()} Please review this item\")\n    console.print(f\"{Icons.info()} Additional information available\")\n</code></pre> <p>Output (with Nerd Fonts): <pre><code>\udb80\udd2c Task completed successfully\n\udb80\udd56 Operation failed\n\udb80\udc2a Please review this item\n\udb80\udefd Additional information available\n</code></pre></p> <p>Output (with emoji fallback): <pre><code>\u2705 Task completed successfully\n\u274c Operation failed\n\u26a0\ufe0f  Please review this item\n\u2139\ufe0f  Additional information available\n</code></pre></p> <p>Output (text fallback): <pre><code>[\u2713] Task completed successfully\n[\u2717] Operation failed\n[!] Please review this item\n[i] Additional information available\n</code></pre></p>"},{"location":"examples/icons/#available-predefined-icons","title":"Available Predefined Icons","text":""},{"location":"examples/icons/#status-icons","title":"Status Icons","text":"<pre><code>from cli_utils.utils.icons import Icons\n\n# Success/completion\nIcons.check()      # \u2705 / \udb80\udd2c / [\u2713]\nIcons.cross()      # \u274c / \udb80\udd56 / [\u2717]\nIcons.circle()     # \u2b55 / \udb80\udd30 / [ ]\nIcons.play()       # \u25b6\ufe0f  / \udb81\udc0a / [&gt;]\n</code></pre>"},{"location":"examples/icons/#time-and-calendar","title":"Time and Calendar","text":"<pre><code>Icons.calendar()   # \ud83d\udcc5 / \udb80\udcee / [DATE]\nIcons.clock()      # \u23f0 / \udb82\udd54 / [TIME]\n</code></pre>"},{"location":"examples/icons/#file-system","title":"File System","text":"<pre><code>Icons.folder()     # \ud83d\udcc1 / \udb80\ude4b / [FOLDER]\nIcons.file()       # \ud83d\udcc4 / \udb80\ude19 / [FILE]\nIcons.list()       # \ud83d\udccb / \udb80\ude79 / [LIST]\n</code></pre>"},{"location":"examples/icons/#information","title":"Information","text":"<pre><code>Icons.info()       # \u2139\ufe0f  / \udb80\udefd / [i]\nIcons.warning()    # \u26a0\ufe0f  / \udb80\udc2a / [!]\nIcons.star()       # \u2b50 / \udb81\udcce / [*]\nIcons.tag()        # \ud83c\udff7\ufe0f  / \udb81\udcf9 / [TAG]\n</code></pre>"},{"location":"examples/icons/#custom-icons","title":"Custom Icons","text":"<p>For icons not in the predefined set, use the <code>icon()</code> function:</p> <pre><code>from cli_utils.utils.icons import icon\n\ndef deployment_status():\n    \"\"\"Show deployment with custom icons.\"\"\"\n    rocket = icon(\"nf-md-rocket\", \"\ud83d\ude80\", \"[LAUNCH]\")\n    console.print(f\"{rocket} Deploying to production...\")\n\n    package = icon(\"nf-md-package\", \"\ud83d\udce6\", \"[PKG]\")\n    console.print(f\"{package} Building package...\")\n\n    cloud = icon(\"nf-md-cloud_upload\", \"\u2601\ufe0f\", \"[UPLOAD]\")\n    console.print(f\"{cloud} Uploading to cloud...\")\n</code></pre>"},{"location":"examples/icons/#finding-nerd-font-icon-names","title":"Finding Nerd Font Icon Names","text":"<p>Nerd Font icons follow the pattern <code>nf-{family}-{name}</code>:</p> <ul> <li>Material Design: <code>nf-md-{name}</code> (e.g., <code>nf-md-check</code>, <code>nf-md-rocket</code>)</li> <li>Font Awesome: <code>nf-fa-{name}</code> (e.g., <code>nf-fa-github</code>, <code>nf-fa-home</code>)</li> <li>Devicons: <code>nf-dev-{name}</code> (e.g., <code>nf-dev-python</code>, <code>nf-dev-javascript</code>)</li> <li>Octicons: <code>nf-oct-{name}</code> (e.g., <code>nf-oct-mark_github</code>)</li> </ul> <p>Resources: - Nerd Fonts Cheat Sheet - Material Design Icons</p>"},{"location":"examples/icons/#real-world-examples","title":"Real-World Examples","text":""},{"location":"examples/icons/#example-1-todo-app-task-display","title":"Example 1: TODO App Task Display","text":"<pre><code>from cli_utils.utils.icons import Icons\n\nclass TaskDisplay:\n    \"\"\"Display tasks with appropriate status icons.\"\"\"\n\n    def show_task(self, task_name: str, status: str, due_date: str = None, has_reminder: bool = False):\n        # Map status to icons\n        status_icons = {\n            \"new\": Icons.circle(),\n            \"in_progress\": Icons.play(),\n            \"completed\": Icons.check(),\n        }\n\n        icon = status_icons.get(status, Icons.circle())\n        parts = [f\"{icon} {task_name}\"]\n\n        # Add metadata with icons\n        if due_date:\n            parts.append(f\"{Icons.calendar()} {due_date}\")\n\n        if has_reminder:\n            parts.append(f\"{Icons.clock()} Reminder set\")\n\n        console.print(\" \".join(parts))\n\n\n# Usage\ndisplay = TaskDisplay()\ndisplay.show_task(\"Buy groceries\", \"new\", \"2025-11-01\", True)\ndisplay.show_task(\"Write report\", \"in_progress\", \"2025-10-30\")\ndisplay.show_task(\"Call dentist\", \"completed\")\n</code></pre> <p>Output (with Nerd Fonts): <pre><code>\udb80\udd30 Buy groceries \udb80\udcee 2025-11-01 \udb82\udd54 Reminder set\n\udb81\udc0a Write report \udb80\udcee 2025-10-30\n\udb80\udd2c Call dentist\n</code></pre></p>"},{"location":"examples/icons/#example-2-file-operations-with-icons","title":"Example 2: File Operations with Icons","text":"<pre><code>from pathlib import Path\nfrom cli_utils.utils.icons import Icons, icon\n\ndef show_directory_tree(path: Path, max_depth: int = 2):\n    \"\"\"Display directory structure with icons.\"\"\"\n\n    def scan_directory(dir_path: Path, depth: int = 0):\n        if depth &gt; max_depth:\n            return\n\n        indent = \"  \" * depth\n\n        for item in sorted(dir_path.iterdir()):\n            if item.is_dir():\n                console.print(f\"{indent}{Icons.folder()} {item.name}/\")\n                scan_directory(item, depth + 1)\n            else:\n                # Different icons based on file type\n                if item.suffix == \".py\":\n                    file_icon = icon(\"nf-dev-python\", \"\ud83d\udc0d\", \"[PY]\")\n                elif item.suffix == \".md\":\n                    file_icon = icon(\"nf-md-language_markdown\", \"\ud83d\udcdd\", \"[MD]\")\n                elif item.suffix == \".json\":\n                    file_icon = icon(\"nf-md-code_json\", \"\ud83d\udcca\", \"[JSON]\")\n                else:\n                    file_icon = Icons.file()\n\n                console.print(f\"{indent}{file_icon} {item.name}\")\n\n    scan_directory(path)\n</code></pre>"},{"location":"examples/icons/#example-3-build-status-report","title":"Example 3: Build Status Report","text":"<pre><code>from cli_utils.utils.icons import Icons, icon\n\ndef build_report(tests_passed: int, tests_failed: int, warnings: int):\n    \"\"\"Generate a build report with icons.\"\"\"\n    console.print(\"\\n[bold]Build Report[/bold]\")\n    console.print(\"\u2500\" * 40)\n\n    # Tests\n    if tests_failed == 0:\n        console.print(f\"{Icons.check()} All tests passed ({tests_passed})\")\n    else:\n        console.print(f\"{Icons.cross()} {tests_failed} tests failed\")\n        console.print(f\"{Icons.info()} {tests_passed} tests passed\")\n\n    # Warnings\n    if warnings &gt; 0:\n        console.print(f\"{Icons.warning()} {warnings} warnings\")\n\n    # Overall status\n    if tests_failed == 0 and warnings == 0:\n        success = icon(\"nf-md-check_circle\", \"\u2705\", \"[SUCCESS]\")\n        console.print(f\"\\n{success} Build successful!\")\n    else:\n        failure = icon(\"nf-md-alert_circle\", \"\u274c\", \"[FAILED]\")\n        console.print(f\"\\n{failure} Build completed with issues\")\n\n\n# Usage\nbuild_report(tests_passed=42, tests_failed=0, warnings=3)\n</code></pre>"},{"location":"examples/icons/#advanced-usage","title":"Advanced Usage","text":""},{"location":"examples/icons/#checking-icon-support","title":"Checking Icon Support","text":"<p>You can check what icon system is being used:</p> <pre><code>from cli_utils.utils.icons import get_icon_manager\n\ndef check_icon_support():\n    \"\"\"Display current icon support level.\"\"\"\n    manager = get_icon_manager()\n\n    if manager._nerd_font_support == 1:\n        console.print(\"[green]\udb80\udd2c Nerd Fonts are available![/green]\")\n        console.print(\"You're getting the best visual experience!\")\n    elif manager._terminal_supports_emoji:\n        console.print(\"[yellow]Using emoji icons[/yellow]\")\n        console.print(\"Nerd Fonts not detected, but emoji work fine!\")\n    else:\n        console.print(\"[dim]Using text icons[/dim]\")\n        console.print(\"For better icons, install Nerd Fonts!\")\n</code></pre>"},{"location":"examples/icons/#dynamic-icon-selection","title":"Dynamic Icon Selection","text":"<pre><code>from cli_utils.utils.icons import icon\n\ndef get_priority_icon(priority: str) -&gt; str:\n    \"\"\"Get icon based on priority level.\"\"\"\n    priority_map = {\n        \"critical\": icon(\"nf-md-alert\", \"\ud83d\udd34\", \"[!!!]\"),\n        \"high\": icon(\"nf-md-chevron_double_up\", \"\u2b06\ufe0f\", \"[HIGH]\"),\n        \"medium\": icon(\"nf-md-minus\", \"\u2796\", \"[MED]\"),\n        \"low\": icon(\"nf-md-chevron_down\", \"\u2b07\ufe0f\", \"[LOW]\"),\n    }\n    return priority_map.get(priority, Icons.info())\n\n\ndef show_task(name: str, priority: str):\n    \"\"\"Display task with priority icon.\"\"\"\n    priority_icon = get_priority_icon(priority)\n    console.print(f\"{priority_icon} {name}\")\n\n\n# Usage\nshow_task(\"Fix critical bug\", \"critical\")\nshow_task(\"Update documentation\", \"low\")\n</code></pre>"},{"location":"examples/icons/#testing-with-icons","title":"Testing with Icons","text":""},{"location":"examples/icons/#unit-testing","title":"Unit Testing","text":"<p>When writing tests for commands that use icons, you can control the icon behavior:</p> <pre><code>import pytest\nfrom cli_utils.utils.icons import IconManager\n\ndef test_task_display_with_nerd_fonts():\n    \"\"\"Test task display with Nerd Fonts enabled.\"\"\"\n    # Create manager with Nerd Fonts enabled\n    manager = IconManager(nerd_font_support=1)\n\n    # Your test logic here\n    icon_str = manager.icon(\"nf-md-check\", \"\u2705\", \"[DONE]\")\n    assert icon_str != \"[DONE]\"  # Should use Nerd Font or emoji\n\n\ndef test_task_display_without_nerd_fonts():\n    \"\"\"Test task display with Nerd Fonts disabled.\"\"\"\n    # Create manager with Nerd Fonts disabled\n    manager = IconManager(nerd_font_support=0)\n\n    # Your test logic here\n    icon_str = manager.icon(\"nf-md-check\", \"\u2705\", \"[DONE]\")\n    # Will use emoji or text fallback\n    assert icon_str in [\"\u2705\", \"[DONE]\"]\n</code></pre>"},{"location":"examples/icons/#integration-testing","title":"Integration Testing","text":"<p>For integration tests, the icon system will use whatever is configured in your test environment:</p> <pre><code>def test_build_report_output(capsys):\n    \"\"\"Test that build report produces output.\"\"\"\n    from myapp.build import build_report\n\n    build_report(tests_passed=10, tests_failed=0, warnings=2)\n\n    captured = capsys.readouterr()\n    # Should contain \"tests passed\" regardless of icon system\n    assert \"tests passed\" in captured.out.lower()\n</code></pre>"},{"location":"examples/icons/#configuration","title":"Configuration","text":""},{"location":"examples/icons/#checking-nerd-font-status","title":"Checking Nerd Font Status","text":"<p>Use the Makefile target to check if Nerd Fonts are installed:</p> <pre><code>make check-nerdfonts\n</code></pre> <p>This will show: - Whether Nerd Fonts are detected - List of installed Nerd Fonts - Instructions for installation if needed</p>"},{"location":"examples/icons/#manual-configuration","title":"Manual Configuration","text":"<p>The icon system configuration is stored in <code>~/.config/cli_utils/config.yaml</code>:</p> <pre><code>display:\n  nerd_font_support: 1  # 1 = enabled, 0 = disabled\n</code></pre> <p>To force disable Nerd Fonts (useful for testing text fallback):</p> <pre><code>display:\n  nerd_font_support: 0\n</code></pre>"},{"location":"examples/icons/#migrating-existing-data","title":"Migrating Existing Data","text":"<p>If you have an existing TODO app database with emoji icons, you can migrate them to Nerd Fonts:</p> <pre><code># Migrate all category icons from emoji to Nerd Fonts\nmake migrate-icons\n</code></pre> <p>What it does: - Scans all categories in the TODO app database - Replaces emoji icons (\ud83d\udc64, \ud83d\udcbc, \ud83d\udccb, etc.) with Nerd Font equivalents - Preserves category names, descriptions, and other data - Works on both system and custom categories</p> <p>When to use: - After upgrading to a version with the icon system - When you first install Nerd Fonts and want existing categories to use them - If you manually edited the database and want to restore Nerd Font icons</p>"},{"location":"examples/icons/#installing-nerd-fonts","title":"Installing Nerd Fonts","text":"<p>For the best visual experience, install Nerd Fonts:</p>"},{"location":"examples/icons/#quick-installation","title":"Quick Installation","text":"<ol> <li>Download a Nerd Font:</li> <li>Visit Nerd Fonts Downloads</li> <li> <p>Popular choices: FiraCode, JetBrainsMono, Hack, Meslo</p> </li> <li> <p>Install the font:</p> </li> <li>Linux: Copy <code>.ttf</code> files to <code>~/.local/share/fonts/</code> and run <code>fc-cache -fv</code></li> <li>macOS: Double-click the font file and click \"Install Font\"</li> <li> <p>Windows: Right-click the font file and select \"Install\"</p> </li> <li> <p>Configure your terminal:</p> </li> <li>Set your terminal to use the Nerd Font you installed</li> <li> <p>Restart the terminal</p> </li> <li> <p>Verify installation: <pre><code>make check-nerdfonts\n</code></pre></p> </li> </ol>"},{"location":"examples/icons/#popular-nerd-fonts","title":"Popular Nerd Fonts","text":"Font Best For Features FiraCode General coding Programming ligatures JetBrainsMono IDEs Designed for long coding sessions Hack Small screens Excellent readability Meslo Consistency Based on Apple's Menlo"},{"location":"examples/icons/#best-practices","title":"Best Practices","text":""},{"location":"examples/icons/#1-always-use-predefined-icons-when-available","title":"1. Always Use Predefined Icons When Available","text":"<pre><code># \u2705 Good - Uses predefined icon\nfrom cli_utils.utils.icons import Icons\nconsole.print(f\"{Icons.check()} Done\")\n\n# \u274c Bad - Hardcoded emoji\nconsole.print(\"\u2705 Done\")\n</code></pre>"},{"location":"examples/icons/#2-provide-good-fallbacks","title":"2. Provide Good Fallbacks","text":"<pre><code># \u2705 Good - Clear text fallback\nicon(\"nf-md-rocket\", \"\ud83d\ude80\", \"[LAUNCH]\")\n\n# \u274c Bad - Unclear fallback\nicon(\"nf-md-rocket\", \"\ud83d\ude80\", \"[R]\")\n</code></pre>"},{"location":"examples/icons/#3-use-icons-consistently","title":"3. Use Icons Consistently","text":"<pre><code># \u2705 Good - Consistent icon usage for same concept\nstatus_icons = {\n    \"pending\": Icons.circle(),\n    \"running\": Icons.play(),\n    \"done\": Icons.check(),\n}\n\n# \u274c Bad - Mixing different icon types\n# Using Icons.circle() sometimes, hardcoded \"\u25cb\" other times\n</code></pre>"},{"location":"examples/icons/#4-dont-overuse-icons","title":"4. Don't Overuse Icons","text":"<pre><code># \u2705 Good - Icons add clarity\nconsole.print(f\"{Icons.check()} Build successful\")\nconsole.print(f\"{Icons.warning()} 3 warnings found\")\n\n# \u274c Bad - Too many icons\nconsole.print(f\"{Icons.folder()} Processing {Icons.file()} files in {Icons.folder()} directory...\")\n</code></pre>"},{"location":"examples/icons/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/icons/#icons-not-displaying","title":"Icons Not Displaying","text":"<p>Problem: Icons show as boxes or question marks</p> <p>Solution: 1. Install a Nerd Font 2. Configure your terminal to use it 3. Run <code>make check-nerdfonts</code> to verify</p>"},{"location":"examples/icons/#emoji-not-working","title":"Emoji Not Working","text":"<p>Problem: Emoji show as <code>??</code> or boxes</p> <p>Solution: - Update your terminal emulator - Try a modern terminal: kitty, wezterm, alacritty, iTerm2</p>"},{"location":"examples/icons/#want-to-force-text-mode","title":"Want to Force Text Mode","text":"<p>Problem: Need plain text output (e.g., for CI/CD logs)</p> <p>Solution: Edit <code>~/.config/cli_utils/config.yaml</code>: <pre><code>display:\n  nerd_font_support: 0\n</code></pre></p>"},{"location":"examples/icons/#see-also","title":"See Also","text":"<ul> <li>Configuration Guide - Icon system configuration</li> <li>Common Utilities - Other utilities</li> <li>TODO App - Real-world icon usage example</li> </ul>"},{"location":"examples/text-utils/","title":"Text Utils Examples","text":"<p>The text utils group provides commands for common text manipulation tasks.</p>"},{"location":"examples/text-utils/#uppercase","title":"Uppercase","text":"<p>Convert text to uppercase:</p> <pre><code>cli-utils local text-utils uppercase \"hello world\"\n# Output: HELLO WORLD\n</code></pre> <p>With clipboard support (requires pyperclip):</p> <pre><code>cli-utils local text-utils uppercase \"hello world\" --copy\n# Output: HELLO WORLD\n# \u2713 Copied to clipboard\n</code></pre>"},{"location":"examples/text-utils/#lowercase","title":"Lowercase","text":"<p>Convert text to lowercase:</p> <pre><code>cli-utils local text-utils lowercase \"HELLO WORLD\"\n# Output: hello world\n</code></pre>"},{"location":"examples/text-utils/#title-case","title":"Title Case","text":"<p>Convert text to title case:</p> <pre><code>cli-utils local text-utils titlecase \"hello world\"\n# Output: Hello World\n</code></pre>"},{"location":"examples/text-utils/#use-cases","title":"Use Cases","text":""},{"location":"examples/text-utils/#processing-file-names","title":"Processing File Names","text":"<pre><code># Convert filename to lowercase\nNEW_NAME=$(cli-utils local text-utils lowercase \"MY_FILE.TXT\")\nmv \"MY_FILE.TXT\" \"$NEW_NAME\"\n</code></pre>"},{"location":"examples/text-utils/#formatting-output","title":"Formatting Output","text":"<pre><code># Format headers\nHEADER=$(cli-utils local text-utils uppercase \"important notice\")\necho \"$HEADER\"\n</code></pre>"},{"location":"examples/text-utils/#batch-processing","title":"Batch Processing","text":"<pre><code># Process multiple strings\nfor word in \"hello\" \"world\" \"test\"; do\n    cli-utils local text-utils titlecase \"$word\"\ndone\n</code></pre>"},{"location":"examples/text-utils/#adding-more-text-utils","title":"Adding More Text Utils","text":"<p>You can easily add more text utilities. Here's an example:</p> <pre><code># src/cli_utils/commands/local/text_utils/reverse.py\nimport typer\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef reverse(\n    text: str = typer.Argument(..., help=\"Text to reverse\"),\n) -&gt; None:\n    \"\"\"Reverse the input text.\"\"\"\n    result = text[::-1]\n    console.print(f\"[green]{result}[/green]\")\n</code></pre> <p>Then use it:</p> <pre><code>cli-utils local text-utils reverse \"hello\"\n# Output: olleh\n</code></pre>"},{"location":"examples/todo-app/","title":"TODO App","text":"<p>A full-featured terminal-based TODO application with reminders, built using the Textual TUI framework.</p>"},{"location":"examples/todo-app/#overview","title":"Overview","text":"<p>The TODO app provides a modern, interactive interface for managing tasks with categories, progress tracking, due dates, and reminder notifications.</p>"},{"location":"examples/todo-app/#features","title":"Features","text":"<ul> <li>Task Management: Create, edit, delete, and toggle tasks</li> <li>Categories: Organize tasks into customizable categories</li> <li>Progress Tracking: Track task completion percentage</li> <li>Due Dates: Set and monitor task deadlines</li> <li>Reminders: Schedule reminder notifications for tasks</li> <li>Smart Lists: Pre-built filters (All, Upcoming, Past Due, Completed)</li> <li>Desktop Notifications: Get notified when reminders are due</li> <li>Background Service: Auto-start reminder daemon at login</li> <li>Smart Icons: Automatic Nerd Font detection with emoji/text fallback</li> </ul>"},{"location":"examples/todo-app/#quick-start","title":"Quick Start","text":""},{"location":"examples/todo-app/#launch-the-app","title":"Launch the App","text":"<pre><code># Launch the TODO app\ncli-utils local system-info todo\n</code></pre> <p>The app will open in a full-screen terminal interface with: - Left sidebar: Smart lists and categories - Center panel: Task list - Bottom bar: Keyboard shortcuts</p>"},{"location":"examples/todo-app/#basic-usage","title":"Basic Usage","text":"<p>Navigate: - <code>\u2191</code>/<code>\u2193</code> or <code>j</code>/<code>k</code> - Move between items - <code>Tab</code> - Switch between sidebar and task list</p> <p>Manage Tasks: - <code>n</code> - Create new task - <code>e</code> - Edit selected task - <code>d</code> - Delete selected task - <code>Space</code> - Toggle task completion - <code>r</code> - Manage reminders for selected task</p> <p>Switch Views: - <code>k</code> - Show categories view (when in tasks) - <code>t</code> - Show tasks view (when in categories)</p> <p>Exit: - <code>q</code> - Quit application</p>"},{"location":"examples/todo-app/#task-management","title":"Task Management","text":""},{"location":"examples/todo-app/#creating-tasks","title":"Creating Tasks","text":"<ol> <li>Press <code>n</code> or type in the input box at the bottom</li> <li>Fill in the task details:</li> <li>Name: Task description (required)</li> <li>Category: Select from dropdown</li> <li>Status: New, In Progress, or Completed</li> <li>Progress: 0-100%</li> <li>Due Date: YYYY-MM-DD format</li> <li>Press <code>Save</code> or <code>Enter</code></li> </ol> <p>Example: <pre><code>Name: Complete project documentation\nCategory: Work\nStatus: In Progress\nProgress: 50\nDue Date: 2025-11-15\n</code></pre></p>"},{"location":"examples/todo-app/#editing-tasks","title":"Editing Tasks","text":"<ol> <li>Select a task</li> <li>Press <code>e</code> to open edit screen</li> <li>Modify any field</li> <li>Press <code>Save</code></li> </ol>"},{"location":"examples/todo-app/#completing-tasks","title":"Completing Tasks","text":"<p>Toggle Status: - Select a task and press <code>Space</code> to mark as completed/incomplete</p> <p>Manual Completion: - Edit the task and set Status to \"Completed\" or Progress to 100%</p> <p>With Reminders: When completing a task that has reminders, you'll see a confirmation dialog: - Remove Reminders: Delete all reminders for the task - Keep Reminders: Complete task but keep reminders active - Cancel: Don't complete the task</p>"},{"location":"examples/todo-app/#categories","title":"Categories","text":""},{"location":"examples/todo-app/#using-categories","title":"Using Categories","text":"<p>Categories help organize tasks into logical groups. Built-in system categories: - \ud83d\udcdd General (default) - \ud83d\udcbc Work - \ud83c\udfe0 Personal - \ud83d\udcda Study</p>"},{"location":"examples/todo-app/#managing-categories","title":"Managing Categories","text":"<ol> <li>Press <code>k</code> to switch to categories view</li> <li>Use the same shortcuts:</li> <li><code>n</code> - New category</li> <li><code>e</code> - Edit category (custom categories only)</li> <li><code>d</code> - Delete category (custom categories only)</li> <li><code>t</code> - Return to tasks view</li> </ol>"},{"location":"examples/todo-app/#creating-custom-categories","title":"Creating Custom Categories","text":"<ol> <li>In categories view, press <code>n</code></li> <li>Enter format: <code>CategoryName:Icon</code></li> <li>Example: <code>Shopping:\ud83d\uded2</code></li> <li>Example: <code>Health:\ud83d\udcaa</code></li> </ol>"},{"location":"examples/todo-app/#reminders","title":"Reminders","text":""},{"location":"examples/todo-app/#setting-reminders","title":"Setting Reminders","text":"<ol> <li>Select a task</li> <li>Press <code>r</code> to open reminders screen</li> <li>Click <code>Add</code> to create a new reminder</li> <li>Enter date/time in format: <code>YYYY-MM-DD HH:MM</code></li> <li>Example: <code>2025-11-15 09:00</code></li> <li>Save the reminder</li> </ol> <p>Multiple Reminders: You can set multiple reminders for a single task (e.g., one day before, one hour before).</p>"},{"location":"examples/todo-app/#managing-reminders","title":"Managing Reminders","text":"<p>Edit: 1. Select a reminder 2. Click <code>Edit</code> or press <code>e</code> 3. Update the date/time 4. Save</p> <p>Delete: 1. Select a reminder 2. Click <code>Delete</code> or press <code>d</code> 3. Confirm deletion</p>"},{"location":"examples/todo-app/#reminder-notifications","title":"Reminder Notifications","text":"<p>When a reminder is due, you'll receive a desktop notification with: - Task name - Due date (if set) - Current progress (if &gt; 0%)</p> <p>Example Notification: <pre><code>\u23f0 Reminder: Complete project documentation\nTask: Complete project documentation\nDue: 2025-11-15\nProgress: 50%\n</code></pre></p>"},{"location":"examples/todo-app/#background-service","title":"Background Service","text":"<p>The reminder daemon runs in the background and checks for due reminders every 60 seconds.</p>"},{"location":"examples/todo-app/#installing-the-service","title":"Installing the Service","text":"<pre><code># Install and enable auto-start at login\nmake install-todo-service\n</code></pre> <p>This will: 1. Copy the service file to <code>~/.config/systemd/user/</code> 2. Enable auto-start at login 3. Start the service immediately</p>"},{"location":"examples/todo-app/#managing-the-service","title":"Managing the Service","text":"<p>Check Status: <pre><code># View service status\nsystemctl --user status todo-reminder.service\n\n# Or use make target\nmake check-todo-service\n</code></pre></p> <p>Control Service: <pre><code># Stop service\nsystemctl --user stop todo-reminder.service\n\n# Start service\nsystemctl --user start todo-reminder.service\n\n# Restart service\nsystemctl --user restart todo-reminder.service\n</code></pre></p> <p>View Logs: <pre><code># Live logs from systemd\njournalctl --user -u todo-reminder.service -f\n\n# Or view daemon log file\ntail -f ~/.config/cli_utils/logs/reminder_daemon.log\n</code></pre></p>"},{"location":"examples/todo-app/#uninstalling-the-service","title":"Uninstalling the Service","text":"<pre><code># Stop and remove service\nmake uninstall-todo-service\n</code></pre>"},{"location":"examples/todo-app/#smart-lists","title":"Smart Lists","text":"<p>Pre-built filters for quick task access:</p>"},{"location":"examples/todo-app/#all-tasks","title":"All Tasks","text":"<p>Shows all tasks regardless of status or due date.</p>"},{"location":"examples/todo-app/#upcoming","title":"Upcoming","text":"<p>Tasks with due dates in the future.</p>"},{"location":"examples/todo-app/#past-due","title":"Past Due","text":"<p>Tasks with due dates that have passed.</p>"},{"location":"examples/todo-app/#completed","title":"Completed","text":"<p>Tasks marked as completed.</p>"},{"location":"examples/todo-app/#data-storage","title":"Data Storage","text":""},{"location":"examples/todo-app/#database-location","title":"Database Location","text":"<pre><code>~/.config/cli_utils/todo.db\n</code></pre> <p>The app uses SQLite for data storage. All tasks, categories, and reminders are stored locally.</p>"},{"location":"examples/todo-app/#log-files","title":"Log Files","text":"<pre><code>~/.config/cli_utils/logs/reminder_daemon.log\n</code></pre> <p>Daemon activity, notifications sent, and errors are logged here.</p>"},{"location":"examples/todo-app/#backup","title":"Backup","text":"<p>To backup your tasks: <pre><code># Copy the database file\ncp ~/.config/cli_utils/todo.db ~/backup/todo_backup.db\n\n# Restore from backup\ncp ~/backup/todo_backup.db ~/.config/cli_utils/todo.db\n</code></pre></p>"},{"location":"examples/todo-app/#keyboard-reference","title":"Keyboard Reference","text":""},{"location":"examples/todo-app/#global","title":"Global","text":"<ul> <li><code>q</code> - Quit application</li> <li><code>\u2191</code>/<code>\u2193</code> - Navigate up/down</li> <li><code>Enter</code> - Select item</li> <li><code>Esc</code> - Cancel input</li> </ul>"},{"location":"examples/todo-app/#task-view","title":"Task View","text":"<ul> <li><code>n</code> - New task</li> <li><code>e</code> - Edit task</li> <li><code>d</code> - Delete task</li> <li><code>Space</code> - Toggle completion</li> <li><code>r</code> - Manage reminders</li> <li><code>k</code> - Switch to categories</li> </ul>"},{"location":"examples/todo-app/#category-view","title":"Category View","text":"<ul> <li><code>n</code> - New category</li> <li><code>e</code> - Edit category</li> <li><code>d</code> - Delete category</li> <li><code>t</code> - Switch to tasks</li> </ul>"},{"location":"examples/todo-app/#examples","title":"Examples","text":""},{"location":"examples/todo-app/#daily-workflow","title":"Daily Workflow","text":"<p>Morning Setup: <pre><code># Launch app\ncli-utils local system-info todo\n\n# Review upcoming tasks (click \"Upcoming\" in sidebar)\n# Set reminders for important tasks (press 'r')\n# Update progress on ongoing tasks (press 'e')\n</code></pre></p> <p>During the Day: - Receive reminder notifications - Toggle tasks as complete (press <code>Space</code>) - Add new tasks as they come up (press <code>n</code>)</p> <p>End of Day: - Review completed tasks (click \"Completed\") - Plan tomorrow's tasks - Set reminders for morning tasks</p>"},{"location":"examples/todo-app/#project-management-example","title":"Project Management Example","text":"<ol> <li>Create Project Category:</li> <li>Press <code>k</code> for categories</li> <li> <p>Press <code>n</code> and enter: <code>MyProject:\ud83d\udcca</code></p> </li> <li> <p>Add Project Tasks: <pre><code>Task 1: Research and planning\nCategory: MyProject\nStatus: New\nDue: 2025-11-10\n\nTask 2: Implementation\nCategory: MyProject\nStatus: New\nDue: 2025-11-20\n\nTask 3: Testing\nCategory: MyProject\nStatus: New\nDue: 2025-11-25\n</code></pre></p> </li> <li> <p>Set Reminders:</p> </li> <li>Day before each due date at 9:00 AM</li> <li> <p>Morning of due date at 8:00 AM</p> </li> <li> <p>Track Progress:</p> </li> <li>Update progress percentage as you work</li> <li>Toggle to completed when done</li> </ol>"},{"location":"examples/todo-app/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"examples/todo-app/#efficient-task-entry","title":"Efficient Task Entry","text":"<p>Type directly in the input box at bottom of screen. The app will open the edit screen with the name pre-filled.</p>"},{"location":"examples/todo-app/#keyboard-first-workflow","title":"Keyboard-First Workflow","text":"<p>All operations can be performed with keyboard shortcuts - no mouse needed!</p>"},{"location":"examples/todo-app/#reminder-strategy","title":"Reminder Strategy","text":"<ul> <li>Set reminders 24 hours before for important tasks</li> <li>Set reminders 1 hour before for time-sensitive tasks</li> <li>Use multiple reminders for critical deadlines</li> </ul>"},{"location":"examples/todo-app/#progress-tracking","title":"Progress Tracking","text":"<ul> <li>Use 0% for not started</li> <li>Use 25%, 50%, 75% for active tasks</li> <li>Use 100% to auto-complete tasks</li> </ul>"},{"location":"examples/todo-app/#category-colors","title":"Category Colors","text":"<p>Use emojis in category names for visual distinction: - \ud83d\udd25 Urgent - \u2b50 Priority - \ud83d\udcc5 Scheduled - \ud83d\udca1 Ideas</p>"},{"location":"examples/todo-app/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/todo-app/#notifications-not-working","title":"Notifications Not Working","text":"<p>Check if notify-send is installed: <pre><code>which notify-send\n# If not found, install: sudo apt install libnotify-bin\n</code></pre></p> <p>Check service status: <pre><code>make check-todo-service\n</code></pre></p> <p>View daemon logs: <pre><code>tail -f ~/.config/cli_utils/logs/reminder_daemon.log\n</code></pre></p>"},{"location":"examples/todo-app/#service-wont-start","title":"Service Won't Start","text":"<p>Check journalctl: <pre><code>journalctl --user -u todo-reminder.service -n 50\n</code></pre></p> <p>Common issues: - Python environment not found: Ensure uv is installed - Project path incorrect: Reinstall with <code>make install-todo-service</code> - Database permissions: Check <code>~/.config/cli_utils/todo.db</code> permissions</p>"},{"location":"examples/todo-app/#database-issues","title":"Database Issues","text":"<p>Reset database (WARNING: deletes all data): <pre><code>rm ~/.config/cli_utils/todo.db\n# Restart app to recreate\n</code></pre></p>"},{"location":"examples/todo-app/#icons-showing-emoji-instead-of-nerd-fonts","title":"Icons Showing Emoji Instead of Nerd Fonts","text":"<p>If you see emoji (\ud83d\udc64 \ud83d\udcbc \u2705) instead of Nerd Font icons:</p> <p>For new categories (created after icon system install): 1. Check if Nerd Fonts are installed:    <pre><code>make check-nerdfonts\n</code></pre></p> <ol> <li>Ensure your terminal is using a Nerd Font</li> <li>Restart the terminal and app</li> </ol> <p>For existing categories (created before icon system):</p> <p>Categories store their icons in the database. To migrate emoji to Nerd Fonts:</p> <pre><code># Migrate all category icons\nmake migrate-icons\n</code></pre> <p>This will convert all emoji icons to their Nerd Font equivalents while preserving category data.</p> <p>What the migration does: - Updates Personal (\ud83d\udc64 \u2192 \udb80\udc04) - Updates Work (\ud83d\udcbc \u2192 \udb80\udcd6) - Updates any custom categories with emoji icons - Safe to run multiple times</p>"},{"location":"examples/todo-app/#architecture","title":"Architecture","text":""},{"location":"examples/todo-app/#components","title":"Components","text":"<p>Main App (todo_app.py) - Textual TUI application - Task and category views - Sidebar navigation</p> <p>Database (database.py) - SQLite backend - Task, category, and reminder storage - Notification tracking</p> <p>Reminder Daemon (reminder_daemon.py) - Background service - 60-second check interval - Plugin-based notification system</p> <p>Notification Plugins - Base plugin architecture - Desktop notification plugin (notify-send) - Extensible for email, SMS, etc.</p>"},{"location":"examples/todo-app/#technology-stack","title":"Technology Stack","text":"<ul> <li>UI Framework: Textual (Python TUI framework)</li> <li>Database: SQLite3</li> <li>CLI Framework: Typer</li> <li>Service Manager: systemd (Linux)</li> <li>Notifications: notify-send (Linux desktop)</li> </ul>"},{"location":"examples/todo-app/#future-enhancements","title":"Future Enhancements","text":"<p>Potential features for future development:</p> <ul> <li>Additional Notification Plugins: Email, SMS, webhook</li> <li>Task Priorities: High, medium, low priority levels</li> <li>Subtasks: Break down tasks into smaller steps</li> <li>Tags: Cross-category task organization</li> <li>Search: Find tasks by name, date, or content</li> <li>Recurring Tasks: Automatic task creation on schedule</li> <li>Export/Import: JSON/CSV export for backup</li> <li>Task Dependencies: Link tasks with prerequisites</li> <li>Time Tracking: Log time spent on tasks</li> <li>Reports: Generate productivity reports</li> </ul>"},{"location":"examples/todo-app/#contributing","title":"Contributing","text":"<p>The TODO app is part of the CLI Utils project. To contribute:</p> <ol> <li>Source code: <code>src/cli_utils/commands/local/system_info/_todo_app/</code></li> <li>Follow the project's contribution guidelines</li> <li>Add tests for new features</li> <li>Update documentation</li> </ol>"},{"location":"examples/todo-app/#see-also","title":"See Also","text":"<ul> <li>Command Reference - All CLI commands</li> <li>Quick Reference - Quick command guide</li> <li>Makefile Reference - Build automation</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide covers different ways to install and use CLI Utils.</p>"},{"location":"getting-started/installation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Development Installation</li> <li>System-wide Installation</li> <li>Installation Methods Comparison</li> <li>Verifying Installation</li> <li>Troubleshooting</li> </ul>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For local development and testing:</p> <pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd cli_utils\n\n# Create virtual environment and install dependencies\nmake install-dev\n\n# Test the installation\nmake test\nmake version\n</code></pre>"},{"location":"getting-started/installation/#system-wide-installation","title":"System-wide Installation","text":"<p>There are two ways to make <code>cli-utils</code> available system-wide:</p>"},{"location":"getting-started/installation/#option-1-symlink-recommended-for-development","title":"Option 1: Symlink (Recommended for Development)","text":"<p>This creates a symlink in <code>~/bin</code> that points to your development version. Changes to the code are immediately available.</p> <pre><code># Create symlink\nmake link-global\n\n# Verify installation\nmake check-global\n\n# Test it works\ncli-utils --help\ncli-utils version\n</code></pre> <p>Advantages: - \u2705 Immediate reflection of code changes - \u2705 Easy to update (just git pull and dependencies update) - \u2705 Only one copy of the code</p> <p>Disadvantages: - \u26a0\ufe0f Requires the project directory to stay in place - \u26a0\ufe0f Depends on the virtual environment being intact</p>"},{"location":"getting-started/installation/#option-2-copy-installation","title":"Option 2: Copy Installation","text":"<p>This copies the wrapper script to <code>~/bin</code>. More stable but requires reinstallation after changes.</p> <pre><code># Copy to ~/bin\nmake install-global\n\n# Verify installation\nmake check-global\n\n# Test it works\ncli-utils --help\ncli-utils version\n</code></pre> <p>Advantages: - \u2705 More stable (doesn't break if you move the project) - \u2705 Still uses the virtual environment from the original location</p> <p>Disadvantages: - \u26a0\ufe0f Requires running <code>make install-global</code> after updates - \u26a0\ufe0f Still depends on the virtual environment location</p>"},{"location":"getting-started/installation/#ensuring-bin-is-in-path","title":"Ensuring ~/bin is in PATH","text":"<p>For either option, make sure <code>~/bin</code> is in your PATH. Add this to your <code>~/.zshrc</code>:</p> <pre><code>export PATH=\"$HOME/bin:$PATH\"\n</code></pre> <p>Then reload your shell:</p> <pre><code>source ~/.zshrc\n</code></pre> <p>Or for bash users (<code>~/.bashrc</code>):</p> <pre><code>export PATH=\"$HOME/bin:$PATH\"\n</code></pre>"},{"location":"getting-started/installation/#installation-methods-comparison","title":"Installation Methods Comparison","text":"Method Updates Stability Use Case Development Manual (<code>git pull</code>) Low (can break) Active development Symlink Automatic Medium Testing, frequent changes Copy Manual (<code>make install-global</code>) High Production use"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":""},{"location":"getting-started/installation/#check-if-installed-globally","title":"Check if installed globally","text":"<pre><code>make check-global\n</code></pre> <p>This will show: - Whether the CLI is installed in <code>~/bin</code> - Whether it's a symlink or copy - Test output of the help command</p>"},{"location":"getting-started/installation/#manual-verification","title":"Manual verification","text":"<pre><code># Check if the file exists\nls -la ~/bin/cli-utils\n\n# Check if it's executable\nfile ~/bin/cli-utils\n\n# Check if it's in PATH\nwhich cli-utils\n\n# Test it runs\ncli-utils --help\ncli-utils version\n</code></pre>"},{"location":"getting-started/installation/#how-the-wrapper-script-works","title":"How the Wrapper Script Works","text":"<p>The <code>scripts/cli-utils</code> wrapper script:</p> <ol> <li>Finds the project root - Even if symlinked, it resolves to the actual location</li> <li>Locates the virtual environment - Looks for <code>.venv</code> in the project root</li> <li>Runs the CLI - Uses the venv's Python with correct PYTHONPATH</li> </ol> <p>The script handles three scenarios:</p> <ol> <li>Already in the correct venv \u2192 Uses Python directly</li> <li>Venv exists \u2192 Uses venv's Python with proper PYTHONPATH</li> <li>No venv found \u2192 Shows helpful error message</li> </ol>"},{"location":"getting-started/installation/#uninstalling","title":"Uninstalling","text":"<p>To remove the global installation:</p> <pre><code>make uninstall-global\n</code></pre> <p>This only removes the file from <code>~/bin</code>. Your development installation remains intact.</p>"},{"location":"getting-started/installation/#updating","title":"Updating","text":""},{"location":"getting-started/installation/#if-using-symlink-link-global","title":"If using symlink (link-global)","text":"<pre><code>cd /path/to/cli_utils\ngit pull\nmake install-dev  # Update dependencies if needed\n# Changes are immediately available via cli-utils command\n</code></pre>"},{"location":"getting-started/installation/#if-using-copy-install-global","title":"If using copy (install-global)","text":"<pre><code>cd /path/to/cli_utils\ngit pull\nmake install-dev     # Update dependencies\nmake install-global  # Reinstall the wrapper script\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command not found","text":"<p>Problem: <code>cli-utils: command not found</code></p> <p>Solutions: 1. Check if installed: <code>ls -la ~/bin/cli-utils</code> 2. Check PATH: <code>echo $PATH | grep \"$HOME/bin\"</code> 3. Add to PATH in <code>~/.zshrc</code>: <code>export PATH=\"$HOME/bin:$PATH\"</code> 4. Reload shell: <code>source ~/.zshrc</code></p>"},{"location":"getting-started/installation/#virtual-environment-not-found","title":"Virtual environment not found","text":"<p>Problem: <code>Error: Virtual environment not found at /path/to/.venv</code></p> <p>Solutions: 1. Install dependencies: <code>cd /path/to/cli_utils &amp;&amp; make install-dev</code> 2. Recreate venv: <code>uv venv &amp;&amp; make install-dev</code></p>"},{"location":"getting-started/installation/#permission-denied","title":"Permission denied","text":"<p>Problem: <code>Permission denied</code> when running <code>cli-utils</code></p> <p>Solutions: 1. Make script executable: <code>chmod +x ~/bin/cli-utils</code> 2. Or reinstall: <code>make link-global</code> or <code>make install-global</code></p>"},{"location":"getting-started/installation/#wrong-version-showing","title":"Wrong version showing","text":"<p>Problem: Running old version after update</p> <p>Solutions: 1. If using copy install: <code>make install-global</code> to reinstall 2. Check which command is being used: <code>which cli-utils</code> 3. Clear any shell command cache: <code>hash -r</code> or restart shell</p>"},{"location":"getting-started/installation/#importerror-or-modulenotfounderror","title":"ImportError or ModuleNotFoundError","text":"<p>Problem: Python can't find modules</p> <p>Solutions: 1. Ensure dependencies are installed: <code>make install-dev</code> 2. Check virtual environment: <code>ls -la /path/to/cli_utils/.venv</code> 3. Reinstall: <code>uv venv &amp;&amp; make install-dev</code></p>"},{"location":"getting-started/installation/#changes-not-reflected","title":"Changes not reflected","text":"<p>Problem: Code changes don't show up when running <code>cli-utils</code></p> <p>Solutions: 1. If using copy install, reinstall: <code>make install-global</code> 2. If using symlink, check: <code>make check-global</code> 3. Verify you're editing the correct project: <code>readlink ~/bin/cli-utils</code></p>"},{"location":"getting-started/installation/#advanced-multiple-installations","title":"Advanced: Multiple Installations","text":"<p>You can have both development and global installations:</p> <pre><code># Development: Run from project directory\ncd /path/to/cli_utils\npython -m cli_utils.main --help\n# or\nmake run\n\n# Global: Run from anywhere\ncli-utils --help\n</code></pre>"},{"location":"getting-started/installation/#alternative-uv-run-development-only","title":"Alternative: uv run (Development Only)","text":"<p>For development, you can also use <code>uv run</code> directly:</p> <pre><code>cd /path/to/cli_utils\nuv run python -m cli_utils.main --help\nuv run python -m cli_utils.main local text_utils uppercase \"hello\"\n</code></pre> <p>This is what the Makefile uses internally.</p>"},{"location":"getting-started/installation/#shell-completion-optional","title":"Shell Completion (Optional)","text":"<p>Enable shell completion for better UX:</p> <pre><code># For zsh\ncli-utils --install-completion zsh\n\n# For bash\ncli-utils --install-completion bash\n</code></pre> <p>Then restart your shell or source your rc file.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with CLI Utils in just a few minutes.</p>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<p>CLI Utils has built-in help for all commands:</p> <pre><code># General help\ncli-utils --help\n\n# Help for a category\ncli-utils local --help\n\n# Help for a command group\ncli-utils local text-utils --help\n\n# Help for a specific command\ncli-utils local text-utils uppercase --help\n</code></pre>"},{"location":"getting-started/quickstart/#using-text-utilities","title":"Using Text Utilities","text":"<p>The text utilities provide simple text manipulation commands:</p> <pre><code># Convert to uppercase\ncli-utils local text-utils uppercase \"hello world\"\n# Output: HELLO WORLD\n\n# Convert to lowercase\ncli-utils local text-utils lowercase \"HELLO WORLD\"\n# Output: hello world\n\n# Convert to title case\ncli-utils local text-utils titlecase \"hello world\"\n# Output: Hello World\n</code></pre>"},{"location":"getting-started/quickstart/#configuration","title":"Configuration","text":"<p>View your current configuration:</p> <pre><code>cli-utils config\n</code></pre> <p>Configuration is stored in <code>~/.config/cli-utils/config.yaml</code> and can be customized.</p>"},{"location":"getting-started/quickstart/#version-information","title":"Version Information","text":"<p>Check the installed version:</p> <pre><code>cli-utils version\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Configuration</li> <li>Discover how to Add Your Own Commands</li> <li>Explore Examples</li> </ul>"},{"location":"reference/api-commands/","title":"Command API Reference","text":"<p>This page provides auto-generated API documentation for all commands.</p>"},{"location":"reference/api-commands/#text-utilities","title":"Text Utilities","text":""},{"location":"reference/api-commands/#uppercase","title":"Uppercase","text":""},{"location":"reference/api-commands/#cli_utils.commands.local.text_utils.uppercase","title":"<code>uppercase</code>","text":"<p>Convert text to uppercase.</p> <p>This module provides a command to convert input text to uppercase.</p>"},{"location":"reference/api-commands/#cli_utils.commands.local.text_utils.uppercase.uppercase","title":"<code>uppercase(text=typer.Argument(..., help='Text to convert to uppercase'), copy=typer.Option(False, '--copy', '-c', help='Copy result to clipboard'))</code>","text":"<p>Convert text to UPPERCASE.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert to uppercase</p> <code>Argument(..., help='Text to convert to uppercase')</code> <code>copy</code> <code>bool</code> <p>If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)</p> <code>Option(False, '--copy', '-c', help='Copy result to clipboard')</code> Example <p>$ cli-utils local text-utils uppercase \"hello world\" HELLO WORLD</p> <p>$ cli-utils local text-utils uppercase \"hello world\" --copy HELLO WORLD \u2713 Copied to clipboard</p>"},{"location":"reference/api-commands/#lowercase","title":"Lowercase","text":""},{"location":"reference/api-commands/#cli_utils.commands.local.text_utils.lowercase","title":"<code>lowercase</code>","text":"<p>Convert text to lowercase.</p> <p>This module provides a command to convert input text to lowercase.</p>"},{"location":"reference/api-commands/#cli_utils.commands.local.text_utils.lowercase.lowercase","title":"<code>lowercase(text=typer.Argument(..., help='Text to convert to lowercase'), copy=typer.Option(False, '--copy', '-c', help='Copy result to clipboard'))</code>","text":"<p>Convert text to lowercase.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert to lowercase</p> <code>Argument(..., help='Text to convert to lowercase')</code> <code>copy</code> <code>bool</code> <p>If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)</p> <code>Option(False, '--copy', '-c', help='Copy result to clipboard')</code> Example <p>$ cli-utils local text-utils lowercase \"HELLO WORLD\" hello world</p> <p>$ cli-utils local text-utils lowercase \"HELLO WORLD\" --copy hello world \u2713 Copied to clipboard</p>"},{"location":"reference/api-commands/#titlecase","title":"Titlecase","text":""},{"location":"reference/api-commands/#cli_utils.commands.local.text_utils.titlecase","title":"<code>titlecase</code>","text":"<p>Convert text to title case.</p> <p>This module provides a command to convert input text to title case.</p>"},{"location":"reference/api-commands/#cli_utils.commands.local.text_utils.titlecase.titlecase","title":"<code>titlecase(text=typer.Argument(..., help='Text to convert to title case'), copy=typer.Option(False, '--copy', '-c', help='Copy result to clipboard'))</code>","text":"<p>Convert text to Title Case.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert to title case</p> <code>Argument(..., help='Text to convert to title case')</code> <code>copy</code> <code>bool</code> <p>If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)</p> <code>Option(False, '--copy', '-c', help='Copy result to clipboard')</code> Example <p>$ cli-utils local text-utils titlecase \"hello world\" Hello World</p> <p>$ cli-utils local text-utils titlecase \"hello world\" --copy Hello World \u2713 Copied to clipboard</p>"},{"location":"reference/api-commands/#developer-tools","title":"Developer Tools","text":""},{"location":"reference/api-commands/#code-report","title":"Code Report","text":""},{"location":"reference/api-commands/#cli_utils.commands.local.devtools.code_report","title":"<code>code_report</code>","text":"<p>Analyze Python files in a directory.</p> <p>This module provides a command to analyze Python source files and generate reports with metrics like line counts, classes, functions, and methods.</p>"},{"location":"reference/api-commands/#cli_utils.commands.local.devtools.code_report.code_report","title":"<code>code_report(directory=None, recursive=False, format=typer.Option('text', '--format', '-f', help='Output format'), browse=False, output=None)</code>","text":"<p>Analyze Python files in a directory.</p> <p>This command scans Python files and generates a report with metrics including: - Line counts (excluding blank lines and comments) - Number of classes, functions, and methods - Percentage of total lines per file</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>OptionalDirectoryArg</code> <p>Directory to analyze (defaults to current directory if not using --browse)</p> <code>None</code> <code>recursive</code> <code>RecursiveOption</code> <p>If True, search subdirectories recursively</p> <code>False</code> <code>format</code> <code>Literal['text', 'json', 'markdown']</code> <p>Output format (text, json, or markdown)</p> <code>Option('text', '--format', '-f', help='Output format')</code> <code>browse</code> <code>BrowseOption</code> <p>If True, launch a file manager (Yazi/MC) to select directory interactively</p> <code>False</code> <code>output</code> <code>OutputOption</code> <p>File path to save output. If set to 'browse', use file manager to select location</p> <code>None</code> Example <p>$ cli-utils local devtools code-report . $ cli-utils local devtools code-report src --recursive $ cli-utils local devtools code-report . --format json $ cli-utils local devtools code-report --browse $ cli-utils local devtools code-report --browse --recursive $ cli-utils local devtools code-report . --output report.txt $ cli-utils local devtools code-report . --format json --output browse</p>"},{"location":"reference/api-commands/#count-tests","title":"Count Tests","text":""},{"location":"reference/api-commands/#cli_utils.commands.local.devtools.count_tests","title":"<code>count_tests</code>","text":"<p>Count test functions in Python test files.</p> <p>This module provides a command to scan test files and count test functions, providing a summary of test coverage across the codebase.</p>"},{"location":"reference/api-commands/#cli_utils.commands.local.devtools.count_tests.count_tests","title":"<code>count_tests(directory=None, recursive=False, pattern=typer.Option('test_*.py', '--pattern', '-p', help='File pattern to match test files'), browse=False, verbose=False, format=typer.Option('table', '--format', '-f', help='Output format'), output=None)</code>","text":"<p>Count test functions in Python test files.</p> <p>This command scans test files and counts: - Total test files - Total test functions (functions starting with test_) - Total test classes (classes starting with Test) - Tests per file</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>OptionalDirectoryArg</code> <p>Directory to scan (defaults to current directory if not using --browse)</p> <code>None</code> <code>recursive</code> <code>RecursiveOption</code> <p>If True, search subdirectories recursively</p> <code>False</code> <code>pattern</code> <code>str</code> <p>Glob pattern to match test files (default: test_*.py)</p> <code>Option('test_*.py', '--pattern', '-p', help='File pattern to match test files')</code> <code>browse</code> <code>BrowseOption</code> <p>If True, launch a file manager to select directory interactively</p> <code>False</code> <code>verbose</code> <code>VerboseOption</code> <p>If True, show individual test function names</p> <code>False</code> <code>format</code> <code>Literal['table', 'summary', 'json']</code> <p>Output format (table, summary, or json)</p> <code>Option('table', '--format', '-f', help='Output format')</code> <code>output</code> <code>OutputOption</code> <p>File path to save output. If set to 'browse', use file manager to select location</p> <code>None</code> Example <p>$ cli-utils local devtools count-tests . $ cli-utils local devtools count-tests tests --recursive $ cli-utils local devtools count-tests --browse $ cli-utils local devtools count-tests -b -r -v $ cli-utils local devtools count-tests tests -p \"*_test.py\" $ cli-utils local devtools count-tests . --output test_report.txt $ cli-utils local devtools count-tests . --format json --output browse</p>"},{"location":"reference/api-commands/#api-examples","title":"API Examples","text":""},{"location":"reference/api-commands/#weather","title":"Weather","text":""},{"location":"reference/api-commands/#cli_utils.commands.remote.api_example.weather","title":"<code>weather</code>","text":"<p>Get weather for a specific city.</p> <p>This module provides an example of a command that fetches weather data from an API.</p>"},{"location":"reference/api-commands/#cli_utils.commands.remote.api_example.weather.weather","title":"<code>weather(city=typer.Argument(..., help='City to get weather for'), copy=typer.Option(False, '--copy', '-c', help='Copy result to clipboard'))</code>","text":"<p>Get city weather.</p> <p>Parameters:</p> Name Type Description Default <code>city</code> <code>str</code> <p>City to get weather for</p> <code>Argument(..., help='City to get weather for')</code> <code>copy</code> <code>bool</code> <p>If True, copy the result to clipboard (uses xclip/xsel/wl-copy on Linux)</p> <code>Option(False, '--copy', '-c', help='Copy result to clipboard')</code> Example <p>$ cli-utils remote api_examples weather \"milan\" {'latitude': 45.48, 'longitude': 9.199999, 'generationtime_ms': 0.004291534423828125, 'utc_offset_seconds': 0, 'timezone': 'GMT', 'timezone_abbreviation': 'GMT', 'elevation': 128.0}</p> <p>$ cli-utils remote api_examples weather \"milan\" --copy {'latitude': 45.48, 'longitude': 9.199999, 'generationtime_ms': 0.004291534423828125, 'utc_offset_seconds': 0, 'timezone': 'GMT', 'timezone_abbreviation': 'GMT', 'elevation': 128.0} \u2713 Copied to clipboard</p>"},{"location":"reference/commands/","title":"Command Reference","text":"<p>Complete reference for all available commands in CLI Utils.</p>"},{"location":"reference/commands/#command-structure","title":"Command Structure","text":"<pre><code>cli-utils [CATEGORY] [GROUP] [COMMAND] [OPTIONS] [ARGUMENTS]\n</code></pre> <ul> <li>CATEGORY: <code>local</code> or <code>remote</code></li> <li>GROUP: Command group (e.g., <code>text_utils</code>, <code>devtools</code>)</li> <li>COMMAND: Specific command to execute</li> <li>OPTIONS: Flags like <code>--help</code>, <code>--copy</code>, <code>--format</code></li> <li>ARGUMENTS: Required or optional values</li> </ul>"},{"location":"reference/commands/#local-commands","title":"Local Commands","text":"<p>Commands that operate locally on your system.</p>"},{"location":"reference/commands/#text-utils-text_utils","title":"Text Utils (<code>text_utils</code>)","text":"<p>Text transformation and manipulation commands.</p>"},{"location":"reference/commands/#uppercase","title":"<code>uppercase</code>","text":"<p>Convert text to uppercase.</p> <p>Usage: <pre><code>cli-utils local text_utils uppercase [OPTIONS] TEXT\n</code></pre></p> <p>Arguments: - <code>TEXT</code> - Text to convert to uppercase (required)</p> <p>Options: - <code>--copy</code>, <code>-c</code> - Copy result to clipboard - <code>--help</code> - Show help message</p> <p>Examples: <pre><code># Basic usage\ncli-utils local text_utils uppercase \"hello world\"\n# Output: HELLO WORLD\n\n# Copy to clipboard\ncli-utils local text_utils uppercase --copy \"hello\"\n\n# Using shell alias\ntextup \"hello world\"\n\n# From pipe\necho \"hello\" | textup_pipe\n</code></pre></p>"},{"location":"reference/commands/#lowercase","title":"<code>lowercase</code>","text":"<p>Convert text to lowercase.</p> <p>Usage: <pre><code>cli-utils local text_utils lowercase [OPTIONS] TEXT\n</code></pre></p> <p>Arguments: - <code>TEXT</code> - Text to convert to lowercase (required)</p> <p>Options: - <code>--copy</code>, <code>-c</code> - Copy result to clipboard - <code>--help</code> - Show help message</p> <p>Examples: <pre><code># Basic usage\ncli-utils local text_utils lowercase \"HELLO WORLD\"\n# Output: hello world\n\n# Copy to clipboard\ncli-utils local text_utils lowercase --copy \"HELLO\"\n\n# Using shell alias\ntextlow \"HELLO WORLD\"\n\n# From pipe\necho \"HELLO\" | textlow_pipe\n</code></pre></p>"},{"location":"reference/commands/#titlecase","title":"<code>titlecase</code>","text":"<p>Convert text to title case (capitalize each word).</p> <p>Usage: <pre><code>cli-utils local text_utils titlecase [OPTIONS] TEXT\n</code></pre></p> <p>Arguments: - <code>TEXT</code> - Text to convert to title case (required)</p> <p>Options: - <code>--copy</code>, <code>-c</code> - Copy result to clipboard - <code>--help</code> - Show help message</p> <p>Examples: <pre><code># Basic usage\ncli-utils local text_utils titlecase \"hello world\"\n# Output: Hello World\n\n# Copy to clipboard\ncli-utils local text_utils titlecase --copy \"hello\"\n\n# Using shell alias\ntexttitle \"hello world\"\n\n# From pipe\necho \"hello world\" | texttitle_pipe\n</code></pre></p>"},{"location":"reference/commands/#developer-tools-devtools","title":"Developer Tools (<code>devtools</code>)","text":"<p>Code analysis and testing utilities.</p>"},{"location":"reference/commands/#code-report","title":"<code>code-report</code>","text":"<p>Analyze Python files and generate metrics reports.</p> <p>Usage: <pre><code>cli-utils local devtools code-report [OPTIONS] [DIRECTORY]\n</code></pre></p> <p>Arguments: - <code>DIRECTORY</code> - Directory to analyze (optional, defaults to current directory)</p> <p>Options: - <code>--recursive</code>, <code>-r</code> - Search directories recursively - <code>--format</code>, <code>-f</code> - Output format: <code>text</code> (default), <code>json</code>, or <code>markdown</code> - <code>--browse</code>, <code>-b</code> - Browse for directory using file manager (yazi/mc) - <code>--output</code>, <code>-o</code> - Save output to file (use 'browse' for interactive selection) - <code>--help</code> - Show help message</p> <p>Output Metrics: - Line counts (excluding blank lines and comments) - Number of classes, functions, and methods - Percentage of total lines per file - Methods per class breakdown</p> <p>Examples: <pre><code># Analyze current directory\ncli-utils local devtools code-report .\n\n# Analyze specific directory recursively\ncli-utils local devtools code-report src --recursive\n\n# Generate JSON report\ncli-utils local devtools code-report . --format json\n\n# Generate markdown report\ncli-utils local devtools code-report . --format markdown\n\n# Browse for directory\ncli-utils local devtools code-report --browse\n\n# Browse and analyze recursively\ncli-utils local devtools code-report -b -r\n\n# Save to file\ncli-utils local devtools code-report . --output report.txt\n\n# Browse for save location\ncli-utils local devtools code-report . -o browse\n\n# Complete example: browse directory, analyze recursively, save as JSON\ncli-utils local devtools code-report -b -r -f json -o browse\n</code></pre></p> <p>Output Formats:</p> <p>Text (default): <pre><code>\u251c\u2500\u2500 analyze_file.py          (  150 lines, 2 classes, 3 functions, 8 methods, 15.2% of total)\n    - FileAnalyzer: 5 methods\n    - CodeMetrics: 3 methods\n\u2514\u2500\u2500 utils.py                 (  200 lines, 3 classes, 2 functions, 10 methods, 20.2% of total)\n\nTotal:\n  Files     : 2\n  Lines     : 350\n  Classes   : 5\n  Functions : 5\n  Methods   : 18\n</code></pre></p> <p>JSON: <pre><code>{\n  \"total_files\": 2,\n  \"total_lines\": 350,\n  \"total_classes\": 5,\n  \"total_functions\": 5,\n  \"total_methods\": 18,\n  \"files\": [...]\n}\n</code></pre></p> <p>Markdown: <pre><code>| File | Lines | Classes | Functions | Methods | % of Total |\n|------|-------|---------|-----------|---------|------------|\n| `analyze_file.py` | 150 | 2 | 3 | 8 | 42.9% |\n| `utils.py` | 200 | 3 | 2 | 10 | 57.1% |\n</code></pre></p> <p>See Also: - Devtools Examples - Detailed usage examples - Quick Reference - Quick command overview</p>"},{"location":"reference/commands/#count-tests","title":"<code>count-tests</code>","text":"<p>Count test functions in Python test files.</p> <p>Usage: <pre><code>cli-utils local devtools count-tests [OPTIONS] [DIRECTORY]\n</code></pre></p> <p>Arguments: - <code>DIRECTORY</code> - Directory to scan (optional, defaults to current directory)</p> <p>Options: - <code>--recursive</code>, <code>-r</code> - Search directories recursively - <code>--pattern</code>, <code>-p</code> - File pattern to match (default: <code>test_*.py</code>) - <code>--browse</code>, <code>-b</code> - Browse for directory using file manager - <code>--verbose</code>, <code>-v</code> - Show individual test function names - <code>--format</code>, <code>-f</code> - Output format: <code>table</code> (default), <code>summary</code>, or <code>json</code> - <code>--output</code>, <code>-o</code> - Save output to file (use 'browse' for interactive selection) - <code>--help</code> - Show help message</p> <p>What It Counts: - Total test files - Total test functions (starting with <code>test_</code>) - Total test classes (starting with <code>Test</code>) - Tests per file - Average tests per file</p> <p>Examples: <pre><code># Count tests in current directory\ncli-utils local devtools count-tests .\n\n# Count tests recursively\ncli-utils local devtools count-tests tests --recursive\n\n# Show verbose output with test names\ncli-utils local devtools count-tests tests -r -v\n\n# Browse for test directory\ncli-utils local devtools count-tests --browse\n\n# Custom pattern for test files\ncli-utils local devtools count-tests tests -p \"*_test.py\"\n\n# Output as JSON\ncli-utils local devtools count-tests tests -r -f json\n\n# Summary format\ncli-utils local devtools count-tests tests -r -f summary\n\n# Save to file\ncli-utils local devtools count-tests tests --output test_report.txt\n\n# Browse for save location\ncli-utils local devtools count-tests tests -o browse\n\n# Complete example: browse, recursive, verbose, save as JSON\ncli-utils local devtools count-tests -b -r -v -f json -o browse\n</code></pre></p> <p>Output Formats:</p> <p>Table (default): <pre><code>           Test Count Summary\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 File               \u2503 Tests \u2503 Classes \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 test_text_utils.py \u2502     4 \u2502       0 \u2502\n\u2502 test_config.py     \u2502     5 \u2502       1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nTotals:\n  Files     : 2\n  Tests     : 9\n  Classes   : 1\n  Avg/File  : 4.5\n</code></pre></p> <p>Summary: <pre><code>Test Count Summary\n  Files     : 2\n  Tests     : 9\n  Classes   : 1\n  Avg/File  : 4.5\n</code></pre></p> <p>JSON: <pre><code>{\n  \"summary\": {\n    \"total_files\": 2,\n    \"total_tests\": 9,\n    \"total_classes\": 1,\n    \"average_tests_per_file\": 4.5\n  },\n  \"files\": [...]\n}\n</code></pre></p> <p>See Also: - Devtools Examples - Detailed usage examples</p>"},{"location":"reference/commands/#system-info-system_info","title":"System Info (<code>system_info</code>)","text":"<p>System information and management commands.</p>"},{"location":"reference/commands/#todo","title":"<code>todo</code>","text":"<p>Launch an interactive terminal-based TODO application with task management, reminders, and desktop notifications.</p> <p>Usage: <pre><code>cli-utils local system_info todo\n</code></pre></p> <p>Features: - Task management with categories - Progress tracking (0-100%) - Due date monitoring - Multiple reminders per task - Desktop notifications - Background reminder daemon - Smart lists (All, Upcoming, Past Due, Completed)</p> <p>Keyboard Shortcuts: - <code>n</code> - New task/category - <code>e</code> - Edit selected item - <code>d</code> - Delete selected item - <code>Space</code> - Toggle task completion - <code>r</code> - Manage task reminders - <code>k</code> - Switch to categories view - <code>t</code> - Switch to tasks view - <code>q</code> - Quit application</p> <p>Examples: <pre><code># Launch the TODO app\ncli-utils local system_info todo\n\n# The app opens in full-screen terminal mode with:\n# - Left sidebar with smart lists and categories\n# - Center panel with task list\n# - Bottom input bar for quick task entry\n# - Footer with keyboard shortcuts\n</code></pre></p> <p>Reminder Service: <pre><code># Install background reminder service (auto-start at login)\nmake install-todo-service\n\n# Check service status\nmake check-todo-service\n\n# Manually control service\nsystemctl --user status todo-reminder.service\nsystemctl --user start todo-reminder.service\nsystemctl --user stop todo-reminder.service\n\n# View logs\njournalctl --user -u todo-reminder.service -f\n# Or\ntail -f ~/.config/cli_utils/logs/reminder_daemon.log\n\n# Uninstall service\nmake uninstall-todo-service\n</code></pre></p> <p>Data Storage: - Database: <code>~/.config/cli_utils/todo.db</code> - Logs: <code>~/.config/cli_utils/logs/reminder_daemon.log</code></p> <p>Requirements: - For notifications: <code>libnotify-bin</code> package (provides <code>notify-send</code>)   <pre><code>sudo apt install libnotify-bin\n</code></pre></p> <p>See Also: - TODO App Guide - Complete usage guide with examples - Makefile Reference - Service installation commands</p>"},{"location":"reference/commands/#remote-commands","title":"Remote Commands","text":"<p>Commands that interact with external APIs.</p>"},{"location":"reference/commands/#api-examples-api_example","title":"API Examples (<code>api_example</code>)","text":"<p>Example commands demonstrating API integration.</p>"},{"location":"reference/commands/#weather","title":"<code>weather</code>","text":"<p>Get weather information for a city.</p> <p>Usage: <pre><code>cli-utils remote api_example weather [OPTIONS] CITY\n</code></pre></p> <p>Arguments: - <code>CITY</code> - City name (required). Supported: <code>mellieha</code>, <code>milan</code>, <code>paris</code></p> <p>Options: - <code>--copy</code>, <code>-c</code> - Copy result to clipboard (formatted JSON) - <code>--help</code> - Show help message</p> <p>Examples: <pre><code># Get weather for Milan\ncli-utils remote api_example weather milan\n\n# Get weather and copy to clipboard\ncli-utils remote api_example weather paris --copy\n\n# Short form\ncli-utils remote api_example weather mellieha -c\n</code></pre></p> <p>Output: <pre><code>{\n  'latitude': 45.48,\n  'longitude': 9.199999,\n  'generationtime_ms': 0.004291534423828125,\n  'utc_offset_seconds': 0,\n  'timezone': 'GMT',\n  'timezone_abbreviation': 'GMT',\n  'elevation': 128.0\n}\n</code></pre></p> <p>Supported Cities: - <code>mellieha</code> - Mellieha, Malta (35.57\u00b0N, 14.21\u00b0E) - <code>milan</code> - Milan, Italy (45.47\u00b0N, 9.19\u00b0E) - <code>paris</code> - Paris, France (48.86\u00b0N, 2.35\u00b0E)</p> <p>API Used: - Open-Meteo API (https://api.open-meteo.com) - No authentication required - Free and open source</p> <p>See Also: - API Commands Examples - API integration guide</p>"},{"location":"reference/commands/#global-commands","title":"Global Commands","text":"<p>Commands available at the top level.</p>"},{"location":"reference/commands/#config","title":"<code>config</code>","text":"<p>Show current configuration.</p> <p>Usage: <pre><code>cli-utils config\n</code></pre></p> <p>Output: Displays current configuration settings from <code>~/.config/cli-utils/config.yaml</code>.</p>"},{"location":"reference/commands/#version","title":"<code>version</code>","text":"<p>Show CLI Utils version.</p> <p>Usage: <pre><code>cli-utils version\n</code></pre></p> <p>Output: <pre><code>CLI Utils version X.Y.Z\n</code></pre></p> <p>Shell Alias: <pre><code>cuv  # Short form\n</code></pre></p>"},{"location":"reference/commands/#common-patterns","title":"Common Patterns","text":""},{"location":"reference/commands/#using-browse-mode","title":"Using Browse Mode","text":"<p>Many commands support <code>--browse</code> / <code>-b</code> to interactively select directories:</p> <pre><code># Browse for directory to analyze\ncli-utils local devtools code-report --browse\n\n# Browse for test directory\ncli-utils local devtools count-tests -b\n</code></pre> <p>Requires one of these file managers: - yazi (recommended) - mc (Midnight Commander) - ranger - lf</p> <p>Install with: <code>sudo apt install yazi</code> or <code>sudo apt install mc</code></p>"},{"location":"reference/commands/#saving-output","title":"Saving Output","text":"<p>Commands with <code>--output</code> / <code>-o</code> support saving to files:</p> <pre><code># Direct file path\ncli-utils local devtools code-report . -o report.txt\n\n# Browse for save location\ncli-utils local devtools code-report . -o browse\n\n# Combines with format\ncli-utils local devtools code-report . -f json -o metrics.json\n</code></pre> <p>Default filenames based on format: - Text: <code>.txt</code> - JSON: <code>.json</code> - Markdown: <code>.md</code></p>"},{"location":"reference/commands/#clipboard-integration","title":"Clipboard Integration","text":"<p>Commands with <code>--copy</code> / <code>-c</code> copy output to clipboard:</p> <pre><code># Copy text transformation\ntextup --copy \"hello\"\n\n# Copy API result\ncli-utils remote api_example weather milan --copy\n</code></pre> <p>Requires clipboard tool: - Linux: <code>xclip</code>, <code>xsel</code>, or <code>wl-clipboard</code> - macOS: <code>pbcopy</code> (built-in) - Windows: <code>clip</code> (built-in) - Fallback: <code>pyperclip</code> Python package</p>"},{"location":"reference/commands/#combining-options","title":"Combining Options","text":"<p>Most commands support multiple options together:</p> <pre><code># Browse + recursive + JSON + save\ncli-utils local devtools code-report -b -r -f json -o browse\n\n# Browse + recursive + verbose + JSON + save\ncli-utils local devtools count-tests -b -r -v -f json -o browse\n\n# Multiple text transformations\necho \"hello\" | textup_pipe | tee uppercase.txt\n</code></pre>"},{"location":"reference/commands/#getting-help","title":"Getting Help","text":"<pre><code># General help\ncli-utils --help\n\n# Category help\ncli-utils local --help\ncli-utils remote --help\n\n# Group help\ncli-utils local text_utils --help\ncli-utils local devtools --help\n\n# Command help\ncli-utils local text_utils uppercase --help\ncli-utils local devtools code-report --help\n</code></pre>"},{"location":"reference/commands/#next-steps","title":"Next Steps","text":"<ul> <li>Examples - Detailed usage examples for each command</li> <li>Quick Reference - Cheat sheet for common operations</li> <li>Adding Commands - Create your own commands</li> </ul>"},{"location":"reference/makefile/","title":"Makefile Quick Reference Guide","text":"<p>This document provides a quick reference for all available Make targets in the CLI Utils project.</p>"},{"location":"reference/makefile/#essential-commands","title":"Essential Commands","text":"Command Description <code>make help</code> Show all available commands with descriptions <code>make install</code> Install project dependencies <code>make install-dev</code> Install project with development dependencies"},{"location":"reference/makefile/#testing","title":"Testing","text":"Command Example Description <code>make test</code> <code>make test</code> Run all tests with coverage <code>make test TEST=&lt;path&gt;</code> <code>make test TEST=src/tests/test_config.py</code> Run specific test file(s) <code>make test ARGS=&lt;flags&gt;</code> <code>make test ARGS=\"--no-cov -v\"</code> Run tests with custom pytest flags <code>make test TEST=&lt;path&gt; ARGS=&lt;flags&gt;</code> <code>make test TEST=test_core ARGS=\"-v\"</code> Combine both parameters <code>make test-cov</code> <code>make test-cov</code> Run tests with detailed coverage report <code>make test ARGS=\"-k &lt;pattern&gt;\"</code> <code>make test ARGS=\"-k test_uppercase\"</code> Run tests matching a pattern"},{"location":"reference/makefile/#test-examples","title":"Test Examples","text":"<pre><code># Run all tests\nmake test\n\n# Run specific test file\nmake test TEST=src/tests/test_core/test_config.py\n\n# Run all tests in a directory\nmake test TEST=src/tests/test_core\n\n# Run without coverage (faster)\nmake test ARGS=\"--no-cov\"\n\n# Run with verbose output\nmake test ARGS=\"-v\"\n\n# Run specific test by name pattern\nmake test ARGS=\"-k test_uppercase\"\n\n# Run tests in parallel (requires pytest-xdist)\nmake test ARGS=\"-n auto\"\n\n# Run failed tests from last run\nmake test ARGS=\"--lf\"\n</code></pre>"},{"location":"reference/makefile/#code-quality","title":"Code Quality","text":"Command Description <code>make format</code> Format code with ruff <code>make lint</code> Run linting checks (read-only) <code>make lint-fix</code> Run linting and auto-fix issues <code>make check</code> Format and lint in one command <code>make qa</code> Run full QA: clean, format, lint, test with coverage <code>make ci</code> Run CI checks: lint and test with coverage"},{"location":"reference/makefile/#documentation","title":"Documentation","text":"Command Description <code>make docs-build</code> Build documentation to <code>src/site/</code> <code>make docs-serve</code> Serve documentation at http://127.0.0.1:8000 <code>make docs-deploy</code> Deploy documentation to GitHub Pages"},{"location":"reference/makefile/#maintenance","title":"Maintenance","text":"Command Description <code>make clean</code> Remove temporary files, caches, and build artifacts <code>make tree</code> Show project structure (requires <code>tree</code> or uses <code>find</code>) <code>make coverage-open</code> Open HTML coverage report in browser"},{"location":"reference/makefile/#development-workflow","title":"Development Workflow","text":"Command Description <code>make dev-setup</code> Complete development environment setup (includes Nerd Font check) <code>make check-nerdfonts</code> Check if Nerd Fonts are installed on the system <code>make migrate-icons</code> Migrate TODO app category icons from emoji to Nerd Fonts <code>make run</code> Run the CLI application with help <code>make version</code> Display version information <code>make shell</code> Start interactive Python shell with project loaded <code>make build</code> Build distribution packages"},{"location":"reference/makefile/#project-setup","title":"Project Setup","text":"Command Description <code>make init</code> Interactively create a new command group <code>make git-status</code> Show git status with formatting"},{"location":"reference/makefile/#global-installation","title":"Global Installation","text":"Command Description <code>make link-global</code> Create symlink in ~/bin (recommended for dev) <code>make install-global</code> Copy script to ~/bin (more stable) <code>make uninstall-global</code> Remove from ~/bin <code>make check-global</code> Verify global installation status"},{"location":"reference/makefile/#future-features","title":"Future Features","text":"Command Description <code>make container-build</code> Build Podman container (coming soon) <code>make container-run</code> Run in container (coming soon)"},{"location":"reference/makefile/#common-workflows","title":"Common Workflows","text":""},{"location":"reference/makefile/#daily-development","title":"Daily Development","text":"<pre><code># Start of day\nmake dev-setup          # Ensure environment is ready\nmake test               # Run tests\n\n# During development\nmake format             # Format your code\nmake lint               # Check for issues\nmake test               # Run tests frequently\n\n# Before committing\nmake check              # Format and lint\nmake test-cov           # Ensure good coverage\n</code></pre>"},{"location":"reference/makefile/#pre-commit-checklist","title":"Pre-commit Checklist","text":"<pre><code>make qa                 # Runs: clean, format, lint-fix, test-cov\n# Review output, then commit\n</code></pre>"},{"location":"reference/makefile/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code>make ci                 # Runs: lint, test-cov\n</code></pre>"},{"location":"reference/makefile/#checking-nerd-font-support","title":"Checking Nerd Font Support","text":"<pre><code># Check if Nerd Fonts are installed\nmake check-nerdfonts\n\n# This will show:\n# - Whether Nerd Fonts are detected\n# - List of installed Nerd Fonts\n# - Installation instructions if needed\n</code></pre> <p>What it does: - Scans your system fonts using <code>fc-list</code> - Detects any installed Nerd Fonts - Shows up to 5 detected fonts - Provides installation guidance if needed</p> <p>Why it matters: - Nerd Fonts provide beautiful icons in the TODO app - Fallback to emoji or text if not available - Part of <code>make dev-setup</code> workflow</p>"},{"location":"reference/makefile/#migrating-category-icons","title":"Migrating Category Icons","text":"<pre><code># Migrate TODO app category icons to Nerd Fonts\nmake migrate-icons\n</code></pre> <p>What it does: - Updates all TODO app categories in the database - Replaces emoji icons with Nerd Font equivalents - Preserves category names and descriptions</p> <p>When to use: - After upgrading to a version with icon system support - After installing Nerd Fonts for the first time - If you want to convert emoji categories to Nerd Font icons</p> <p>Example output: <pre><code>CATEGORY ICON MIGRATION\n============================================================\n\nFound 2 categories\n\nUpdating category 'Personal':\n  Old icon: \ud83d\udc64 (code: '\ud83d\udc64')\n  New icon: \udb80\udc04 (code: '\\U000f0004')\nUpdating category 'Work':\n  Old icon: \ud83d\udcbc (code: '\ud83d\udcbc')\n  New icon: \udb80\udcd6 (code: '\\U000f00d6')\n\n============================================================\nMigration complete: 2 categories updated\n============================================================\n</code></pre></p>"},{"location":"reference/makefile/#creating-new-commands","title":"Creating New Commands","text":"<pre><code># Option 1: Use interactive helper\nmake init\n\n# Option 2: Manual\nmkdir -p src/cli_utils/commands/local/my_group\ntouch src/cli_utils/commands/local/my_group/__init__.py\n# Create your command files...\n</code></pre>"},{"location":"reference/makefile/#debugging-tests","title":"Debugging Tests","text":"<pre><code># Run with verbose output and stop at first failure\nmake test ARGS=\"-vv -x\"\n\n# Run specific test with print statements visible\nmake test TEST=test_file.py ARGS=\"-s\"\n\n# Drop into debugger on failure\nmake test ARGS=\"--pdb\"\n\n# Show test durations\nmake test ARGS=\"--durations=10\"\n</code></pre>"},{"location":"reference/makefile/#tips-tricks","title":"Tips &amp; Tricks","text":"<ol> <li> <p>Combine TEST and ARGS: You can use both parameters together    <pre><code>make test TEST=src/tests/test_core ARGS=\"-v --no-cov\"\n</code></pre></p> </li> <li> <p>Use tab completion: Type <code>make</code> and press TAB to see available targets</p> </li> <li> <p>Multiple test files: You can specify multiple test files    <pre><code>make test TEST=\"src/tests/test_config.py src/tests/test_commands/\"\n</code></pre></p> </li> <li> <p>Quiet mode: Add <code>-s</code> to make for silent operation    <pre><code>make -s test\n</code></pre></p> </li> <li> <p>Dry run: Use <code>make -n &lt;target&gt;</code> to see what would be executed    <pre><code>make -n test\n</code></pre></p> </li> </ol>"},{"location":"reference/makefile/#environment-variables","title":"Environment Variables","text":"<p>You can override the UV binary if needed: <pre><code>UV=/path/to/uv make test\n</code></pre></p>"},{"location":"reference/makefile/#getting-help","title":"Getting Help","text":"<pre><code># Show all available commands\nmake help\n\n# See what a command will do (dry-run)\nmake -n test\n\n# Check Makefile for details\ncat Makefile\n</code></pre>"},{"location":"reference/quick-reference/","title":"CLI Utils - Quick Reference Card","text":""},{"location":"reference/quick-reference/#installation","title":"Installation","text":"<pre><code># Install dependencies\nmake install-dev\n\n# Install globally (symlink - recommended)\nmake link-global\n\n# Install shell shortcuts\nmake install-aliases\nsource ~/.zshrc\n</code></pre>"},{"location":"reference/quick-reference/#shell-shortcuts-after-make-install-aliases","title":"Shell Shortcuts (After <code>make install-aliases</code>)","text":""},{"location":"reference/quick-reference/#text-conversion","title":"Text Conversion","text":"<pre><code>textup \"hello world\"       # HELLO WORLD\ntextlow \"HELLO WORLD\"      # hello world\ntexttitle \"hello world\"    # Hello World\n</code></pre>"},{"location":"reference/quick-reference/#general-shortcuts","title":"General Shortcuts","text":"<pre><code>cu --help                  # cli-utils --help\ncul text_utils uppercase   # cli-utils local text_utils uppercase\ncuv                        # Show version\ncuc                        # Show config\n</code></pre>"},{"location":"reference/quick-reference/#with-pipes","title":"With Pipes","text":"<pre><code>echo \"hello\" | textup_pipe       # HELLO\ncat file.txt | textlow_pipe      # lowercase each line\n</code></pre>"},{"location":"reference/quick-reference/#full-commands","title":"Full Commands","text":"<pre><code># Text utilities\ncli-utils local text_utils uppercase \"text\"\ncli-utils local text_utils lowercase \"TEXT\"\ncli-utils local text_utils titlecase \"text\"\n\n# With clipboard (requires pyperclip)\ncli-utils local text_utils uppercase --copy \"text\"\n\n# Developer tools\ncli-utils local devtools code-report .\ncli-utils local devtools code-report src --recursive\ncli-utils local devtools code-report . -r -f json\ncli-utils local devtools code-report . --format markdown\ncli-utils local devtools code-report --browse          # Interactive directory picker\ncli-utils local devtools code-report -b -r             # Browse + recursive\n\ncli-utils local devtools count-tests tests             # Count test functions\ncli-utils local devtools count-tests tests -r          # Recursive test count\ncli-utils local devtools count-tests tests -r -v       # Verbose (show test names)\ncli-utils local devtools count-tests -b -r             # Browse + count tests\n\n# TODO app with reminders\ncli-utils local system_info todo                       # Launch interactive TODO app\n\n# Configuration\ncli-utils config\ncli-utils version\n</code></pre>"},{"location":"reference/quick-reference/#development","title":"Development","text":"<pre><code># Testing\nmake test                           # Run all tests\nmake test TEST=test_config.py       # Run specific test\nmake test ARGS=\"-k test_uppercase\"  # Run by pattern\nmake test-cov                       # With coverage\n\n# Code Quality\nmake format                         # Format code\nmake lint                           # Check linting\nmake check                          # Format + lint\nmake qa                             # Full QA suite\n\n# Documentation\nmake docs-serve                     # Serve at localhost:8000\nmake docs-build                     # Build static docs\n\n# Utilities\nmake clean                          # Clean temp files\nmake tree                           # Show structure\nmake run                            # Run CLI with help\n\n# TODO App Service\nmake install-todo-service           # Install reminder daemon\nmake check-todo-service             # Check service status\nmake uninstall-todo-service         # Remove service\n</code></pre>"},{"location":"reference/quick-reference/#adding-new-commands","title":"Adding New Commands","text":"<pre><code># 1. Create file\ntouch src/cli_utils/commands/local/text_utils/reverse.py\n\n# 2. Write function\ncat &gt; src/cli_utils/commands/local/text_utils/reverse.py &lt;&lt; 'EOF'\nimport typer\nfrom rich.console import Console\n\nconsole = Console()\n\ndef reverse(text: str = typer.Argument(..., help=\"Text to reverse\")) -&gt; None:\n    \"\"\"Reverse the input text.\"\"\"\n    console.print(f\"[green]{text[::-1]}[/green]\")\nEOF\n\n# 3. Test it - automatically available!\ncli-utils local text_utils reverse \"hello\"\n</code></pre>"},{"location":"reference/quick-reference/#configuration","title":"Configuration","text":"<p>Location: <code>~/.config/cli-utils/config.yaml</code></p> <pre><code>api:\n  timeout: 60\n  max_retries: 5\n  github:\n    token: your_token\n\npreferences:\n  output_format: json\n</code></pre> <p>Environment Variables: - <code>CLI_UTILS_LOG_LEVEL</code> - Logging level - <code>CLI_UTILS_API_TIMEOUT</code> - API timeout (seconds) - <code>CLI_UTILS_MAX_RETRIES</code> - Max retry attempts</p>"},{"location":"reference/quick-reference/#file-structure","title":"File Structure","text":"<pre><code>cli_utils/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 cli_utils/\n\u2502   \u2502   \u251c\u2500\u2500 __main__.py          # Entry point\n\u2502   \u2502   \u251c\u2500\u2500 main.py              # App logic\n\u2502   \u2502   \u251c\u2500\u2500 config.py            # Configuration\n\u2502   \u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 plugin_loader.py # Auto-discovery\n\u2502   \u2502   \u2514\u2500\u2500 commands/\n\u2502   \u2502       \u251c\u2500\u2500 local/           # Local commands\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 text_utils/\n\u2502   \u2502       \u2514\u2500\u2500 remote/          # Remote API commands\n\u2502   \u251c\u2500\u2500 docs/                    # Documentation\n\u2502   \u2514\u2500\u2500 tests/                   # Tests\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 cli-utils                # Wrapper script\n\u2502   \u2514\u2500\u2500 shell-aliases.sh         # Shell shortcuts\n\u251c\u2500\u2500 Makefile                     # Build automation\n\u2514\u2500\u2500 pyproject.toml              # Project config\n</code></pre>"},{"location":"reference/quick-reference/#troubleshooting","title":"Troubleshooting","text":"<pre><code># Command not found\nwhich cli-utils                  # Check if in PATH\nmake check-global               # Verify installation\n\n# Shortcuts not working\ntype textup                     # Check if loaded\nsource ~/.zshrc                 # Reload shell\n\n# Tests failing\nmake clean &amp;&amp; make test         # Clean and retest\n\n# Dependencies out of date\nmake install-dev                # Reinstall dependencies\n</code></pre>"},{"location":"reference/quick-reference/#common-workflows","title":"Common Workflows","text":""},{"location":"reference/quick-reference/#daily-development","title":"Daily Development","text":"<pre><code>make test           # Run tests frequently\nmake format         # Format before commit\nmake qa            # Full check before push\n</code></pre>"},{"location":"reference/quick-reference/#before-commit","title":"Before Commit","text":"<pre><code>make check         # Format + lint\nmake test-cov      # Tests with coverage\ngit add . &amp;&amp; git commit -m \"message\"\n</code></pre>"},{"location":"reference/quick-reference/#after-updates","title":"After Updates","text":"<pre><code>git pull\nmake install-dev\n# Changes immediately available (if using symlink)\n</code></pre>"},{"location":"reference/quick-reference/#help-documentation","title":"Help &amp; Documentation","text":"<pre><code>make help                       # Show all make commands\ncli-utils --help               # CLI help\ncli-utils local --help         # Category help\ncli-utils local text_utils --help  # Group help\n</code></pre> <p>Documentation: - Project Overview - README at project root - Installation Guide - Detailed installation - Shell Aliases - Alias guide - Makefile Guide - Makefile reference</p>"},{"location":"reference/quick-reference/#examples","title":"Examples","text":"<pre><code># Convert text\ntextup \"hello world\"\n\n# Process files\ncat names.txt | textlow_pipe &gt; names_lower.txt\n\n# Analyze code\ncli-utils local devtools code-report src --recursive\n\n# Generate metrics in JSON\ncli-utils local devtools code-report . -r -f json &gt; metrics.json\n\n# Manage tasks with TODO app\ncli-utils local system_info todo\n# Then use keyboard shortcuts:\n# - n: new task\n# - e: edit task\n# - r: set reminders\n# - space: toggle completion\n\n# In scripts\n#!/bin/bash\nUPPER=$(textup \"$1\")\necho \"Uppercase: $UPPER\"\n\n# Chain commands\necho \"hello world\" | textup_pipe | tee output.txt\n</code></pre>"},{"location":"reference/quick-reference/#tips","title":"Tips","text":"<ul> <li>Use tab completion: <code>cli-utils &lt;TAB&gt;</code></li> <li>Quote multi-word arguments: <code>textup \"hello world\"</code></li> <li>Use pipes for file processing: <code>cat file | textup_pipe</code></li> <li>Check logs: <code>CLI_UTILS_LOG_LEVEL=DEBUG cli-utils ...</code></li> </ul>"},{"location":"reference/scripts/","title":"Scripts Directory","text":"<p>This directory contains helper scripts for the CLI Utils project.</p>"},{"location":"reference/scripts/#available-scripts","title":"Available Scripts","text":""},{"location":"reference/scripts/#cli-utils-wrapper-script","title":"<code>cli-utils</code> (Wrapper Script)","text":"<p>Purpose: System-wide wrapper script that allows running <code>cli-utils</code> from anywhere.</p> <p>Location: <code>scripts/cli-utils</code></p> <p>Usage: <pre><code># After installation (make link-global or make install-global)\ncli-utils --help\ncli-utils local text_utils uppercase \"hello\"\ncli-utils version\n</code></pre></p> <p>How it works: 1. Resolves the project root directory (even when symlinked) 2. Locates the virtual environment at <code>PROJECT_ROOT/.venv</code> 3. Executes the CLI using the venv's Python with correct PYTHONPATH 4. Handles multiple scenarios:    - Already in the correct virtual environment    - Virtual environment exists but not activated    - No virtual environment found (shows helpful error)</p> <p>Installation: <pre><code># Create symlink (recommended for development)\nmake link-global\n\n# Or copy to ~/bin (more stable)\nmake install-global\n\n# Verify installation\nmake check-global\n</code></pre></p> <p>Features: - \u2705 Works from any directory - \u2705 Automatically finds project root (even with symlinks) - \u2705 Uses virtual environment without activation - \u2705 Clear error messages if setup is incomplete - \u2705 Fast execution (uses venv Python directly)</p>"},{"location":"reference/scripts/#quickstartsh-setup-helper","title":"<code>quickstart.sh</code> (Setup Helper)","text":"<p>Purpose: Quick setup script for new developers.</p> <p>Location: <code>scripts/quickstart.sh</code></p> <p>Usage: <pre><code>./scripts/quickstart.sh\n</code></pre></p> <p>What it does: 1. Checks if <code>uv</code> is installed 2. Checks for virtual environment 3. Creates venv if needed (prompts for activation) 4. Installs development dependencies 5. Runs initial tests 6. Shows version info 7. Displays next steps</p> <p>When to use: - First time setting up the project - After cloning the repository - Resetting development environment</p>"},{"location":"reference/scripts/#script-internals","title":"Script Internals","text":""},{"location":"reference/scripts/#cli-utils-script-flow","title":"cli-utils Script Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 User runs: cli-utils &lt;command&gt;      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Resolve script location             \u2502\n\u2502 (handles symlinks)                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Calculate PROJECT_ROOT              \u2502\n\u2502 (one level up from scripts/)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Check: Already in correct venv?     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502 YES               \u2502 NO\n      \u25bc                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Run with \u2502     \u2502 Check: venv exists?\u2502\n\u2502 python   \u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502 YES               \u2502 NO\n                \u25bc                   \u25bc\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502 Run with venv's  \u2502   \u2502 Show     \u2502\n      \u2502 python directly  \u2502   \u2502 error    \u2502\n      \u2502 (+ PYTHONPATH)   \u2502   \u2502 message  \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/scripts/#environment-variables-used","title":"Environment Variables Used","text":"<ul> <li><code>VIRTUAL_ENV</code> - Checked to see if already in a venv</li> <li><code>PYTHONPATH</code> - Set to include <code>src/</code> directory</li> <li><code>BASH_SOURCE[0]</code> - Used to find script location</li> </ul>"},{"location":"reference/scripts/#key-directories","title":"Key Directories","text":"<ul> <li><code>PROJECT_ROOT</code> - Base directory of the project</li> <li><code>VENV_PATH</code> - <code>$PROJECT_ROOT/.venv</code></li> <li><code>VENV_PYTHON</code> - <code>$VENV_PATH/bin/python</code></li> </ul>"},{"location":"reference/scripts/#maintenance","title":"Maintenance","text":""},{"location":"reference/scripts/#updating-the-wrapper-script","title":"Updating the Wrapper Script","text":"<p>If you modify <code>scripts/cli-utils</code>:</p> <ol> <li>For symlink install (link-global):</li> <li>Changes take effect immediately</li> <li> <p>No reinstallation needed</p> </li> <li> <p>For copy install (install-global):</p> </li> <li>Run <code>make install-global</code> to update</li> <li>Or run <code>make uninstall-global &amp;&amp; make install-global</code></li> </ol>"},{"location":"reference/scripts/#testing-the-wrapper","title":"Testing the Wrapper","text":"<pre><code># Test locally (without installation)\n./scripts/cli-utils --help\n\n# Test from different directory\ncd /tmp &amp;&amp; ~/bin/cli-utils --help\n\n# Verify installation\nmake check-global\n</code></pre>"},{"location":"reference/scripts/#common-issues","title":"Common Issues","text":"<p>Issue: Script not found <pre><code># Check if installed\nls -la ~/bin/cli-utils\n\n# Reinstall\nmake link-global\n</code></pre></p> <p>Issue: Permission denied <pre><code># Make executable\nchmod +x scripts/cli-utils\nchmod +x ~/bin/cli-utils\n</code></pre></p> <p>Issue: Virtual environment not found <pre><code># Create and install\nmake install-dev\n</code></pre></p>"},{"location":"reference/scripts/#best-practices","title":"Best Practices","text":"<ol> <li>Use symlink for development</li> <li>Automatically reflects code changes</li> <li> <p>Easy to update</p> </li> <li> <p>Use copy for production</p> </li> <li>More stable</li> <li> <p>Doesn't break if project moves</p> </li> <li> <p>Always check installation <pre><code>make check-global\n</code></pre></p> </li> <li> <p>Keep PATH updated</p> </li> <li>Ensure <code>~/bin</code> is in PATH</li> <li>Add to <code>~/.zshrc</code>: <code>export PATH=\"$HOME/bin:$PATH\"</code></li> </ol>"},{"location":"reference/scripts/#see-also","title":"See Also","text":"<ul> <li>Installation Guide - Detailed installation guide</li> <li>Makefile Reference - Makefile command reference</li> <li>Project Overview - README at project root</li> </ul>"},{"location":"reference/shell-aliases/","title":"Shell Aliases and Shortcuts","text":"<p>This guide shows how to create convenient shell shortcuts for frequently used CLI Utils commands.</p>"},{"location":"reference/shell-aliases/#quick-setup","title":"Quick Setup","text":""},{"location":"reference/shell-aliases/#automatic-installation","title":"Automatic Installation","text":"<pre><code># Add aliases to your shell configuration\nmake install-aliases\n</code></pre> <p>This will add a source line to your <code>~/.zshrc</code> that loads the aliases.</p>"},{"location":"reference/shell-aliases/#manual-installation","title":"Manual Installation","text":"<p>Add this line to your <code>~/.zshrc</code>:</p> <pre><code># CLI Utils shortcuts\nsource /path/to/cli_utils/scripts/shell-aliases.sh\n</code></pre> <p>Then reload your shell:</p> <pre><code>source ~/.zshrc\n</code></pre>"},{"location":"reference/shell-aliases/#available-shortcuts","title":"Available Shortcuts","text":""},{"location":"reference/shell-aliases/#text-utilities","title":"Text Utilities","text":"Shortcut Command Example Output <code>textup</code> uppercase <code>textup \"hello\"</code> <code>HELLO</code> <code>textlow</code> lowercase <code>textlow \"HELLO\"</code> <code>hello</code> <code>texttitle</code> titlecase <code>texttitle \"hello world\"</code> <code>Hello World</code> <code>textupc</code> uppercase + copy <code>textupc \"hello\"</code> <code>HELLO</code> (+ clipboard) <code>textlowc</code> lowercase + copy <code>textlowc \"HELLO\"</code> <code>hello</code> (+ clipboard)"},{"location":"reference/shell-aliases/#general-shortcuts","title":"General Shortcuts","text":"Shortcut Expands To Example <code>cu</code> <code>cli-utils</code> <code>cu --help</code> <code>cul</code> <code>cli-utils local</code> <code>cul text_utils uppercase test</code> <code>cur</code> <code>cli-utils remote</code> <code>cur api fetch</code> <code>cuv</code> <code>cli-utils version</code> <code>cuv</code> <code>cuc</code> <code>cli-utils config</code> <code>cuc</code>"},{"location":"reference/shell-aliases/#pipe-friendly-functions","title":"Pipe-Friendly Functions","text":"Function Description Example <code>textup_pipe</code> Uppercase from stdin or args <code>echo \"hello\" \\| textup_pipe</code> <code>textlow_pipe</code> Lowercase from stdin or args <code>cat file.txt \\| textlow_pipe</code>"},{"location":"reference/shell-aliases/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/shell-aliases/#basic-text-conversion","title":"Basic Text Conversion","text":"<pre><code># Uppercase\ntextup \"hello world\"\n# Output: HELLO WORLD\n\n# Lowercase\ntextlow \"HELLO WORLD\"\n# Output: hello world\n\n# Title case\ntexttitle \"hello world\"\n# Output: Hello World\n</code></pre>"},{"location":"reference/shell-aliases/#with-clipboard","title":"With Clipboard","text":"<pre><code># Convert and copy to clipboard (requires pyperclip)\ntextupc \"important text\"\n# Output: IMPORTANT TEXT\n# (Also copied to clipboard)\n</code></pre>"},{"location":"reference/shell-aliases/#using-shortcuts","title":"Using Shortcuts","text":"<pre><code># Instead of: cli-utils --help\ncu --help\n\n# Instead of: cli-utils version\ncuv\n\n# Instead of: cli-utils local text_utils uppercase \"test\"\ncul text_utils uppercase \"test\"\n</code></pre>"},{"location":"reference/shell-aliases/#pipe-usage","title":"Pipe Usage","text":"<pre><code># Convert stdin to uppercase\necho \"hello\" | textup_pipe\n# Output: HELLO\n\n# Convert file contents\ncat myfile.txt | textlow_pipe\n\n# Chain commands\ncat file.txt | textlow_pipe | grep \"search term\"\n</code></pre>"},{"location":"reference/shell-aliases/#real-world-examples","title":"Real-World Examples","text":"<pre><code># Convert filename to lowercase\nNEW_NAME=$(textlow \"MY_FILE.TXT\")\nmv \"MY_FILE.TXT\" \"$NEW_NAME\"\n\n# Uppercase git branch name\nBRANCH=$(git branch --show-current | textup_pipe)\necho \"Current branch (uppercase): $BRANCH\"\n\n# Title case for headers\necho \"processing results\" | texttitle\n# Output: Processing Results\n\n# Multiple arguments\ntextup one two three\n# Output: ONE (only first arg, use quotes for multiple words)\n\ntextup \"one two three\"\n# Output: ONE TWO THREE (correct)\n</code></pre>"},{"location":"reference/shell-aliases/#custom-aliases","title":"Custom Aliases","text":"<p>You can add your own aliases to <code>~/.zshrc</code>:</p>"},{"location":"reference/shell-aliases/#simple-alias","title":"Simple Alias","text":"<pre><code># Simple command alias\nalias mycommand='cli-utils local text_utils uppercase'\n\n# Usage\nmycommand \"hello\"\n</code></pre>"},{"location":"reference/shell-aliases/#function-with-logic","title":"Function with Logic","text":"<pre><code># Function with default value\ntextup_default() {\n    if [ $# -eq 0 ]; then\n        echo \"Usage: textup_default &lt;text&gt;\"\n        return 1\n    fi\n    cli-utils local text_utils uppercase \"$@\"\n}\n\n# Function with multiple operations\ntext_process() {\n    local text=\"$1\"\n    echo \"Original: $text\"\n    echo \"Uppercase: $(textup \"$text\")\"\n    echo \"Lowercase: $(textlow \"$text\")\"\n    echo \"Titlecase: $(texttitle \"$text\")\"\n}\n\n# Usage\ntext_process \"Hello World\"\n</code></pre>"},{"location":"reference/shell-aliases/#advanced-combine-with-other-tools","title":"Advanced: Combine with Other Tools","text":"<pre><code># Uppercase clipboard content (Linux with xclip)\nclip_upper() {\n    xclip -o -selection clipboard | textup_pipe | xclip -selection clipboard\n}\n\n# Uppercase clipboard content (macOS)\nclip_upper() {\n    pbpaste | textup_pipe | pbcopy\n}\n\n# Convert and save to file\ntext_upper_save() {\n    textup \"$1\" &gt; output.txt\n    echo \"Saved to output.txt\"\n}\n</code></pre>"},{"location":"reference/shell-aliases/#zsh-specific-features","title":"Zsh-Specific Features","text":""},{"location":"reference/shell-aliases/#global-aliases-zsh-only","title":"Global Aliases (Zsh Only)","text":"<pre><code># Add to ~/.zshrc\nalias -g TUP='| textup_pipe'\nalias -g TLOW='| textlow_pipe'\nalias -g TTITLE='| texttitle_pipe'\n\n# Usage - can be used anywhere in the command line\necho \"hello\" TUP\n# Same as: echo \"hello\" | textup_pipe\n\ncat file.txt TLOW\n# Same as: cat file.txt | textlow_pipe\n</code></pre>"},{"location":"reference/shell-aliases/#suffix-aliases-zsh-only","title":"Suffix Aliases (Zsh Only)","text":"<pre><code># Automatically process .upper files\nalias -s upper=textup\n\n# Usage\n# Create file: echo \"hello\" &gt; test.upper\n# Run: ./test.upper\n# (Will automatically run through textup)\n</code></pre>"},{"location":"reference/shell-aliases/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"reference/shell-aliases/#1-tab-completion","title":"1. Tab Completion","text":"<p>With aliases, you can still use tab completion:</p> <pre><code>cu &lt;TAB&gt;          # Shows cli-utils commands\ncul &lt;TAB&gt;         # Shows local commands\ntextup &lt;TAB&gt;      # Tab completes arguments if configured\n</code></pre>"},{"location":"reference/shell-aliases/#2-command-history","title":"2. Command History","text":"<p>Aliases appear in your shell history:</p> <pre><code>history | grep textup\n# Shows all textup commands you've run\n</code></pre>"},{"location":"reference/shell-aliases/#3-combining-with-find","title":"3. Combining with Find","text":"<pre><code># Uppercase all .txt filenames\nfind . -name \"*.txt\" -exec bash -c 'textup \"$(basename {})\"' \\;\n\n# Convert text in multiple files\nfor file in *.txt; do\n    cat \"$file\" | textup_pipe &gt; \"${file}.upper\"\ndone\n</code></pre>"},{"location":"reference/shell-aliases/#4-environment-variables","title":"4. Environment Variables","text":"<pre><code># Store transformed text in variables\nUPPER=$(textup \"hello world\")\necho $UPPER\n# Output: HELLO WORLD\n</code></pre>"},{"location":"reference/shell-aliases/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/shell-aliases/#aliases-not-found","title":"Aliases Not Found","text":"<p>Problem: <code>textup: command not found</code></p> <p>Solution: <pre><code># Check if aliases are loaded\ntype textup\n\n# Reload shell configuration\nsource ~/.zshrc\n\n# Verify the source line is in ~/.zshrc\ngrep \"shell-aliases.sh\" ~/.zshrc\n</code></pre></p>"},{"location":"reference/shell-aliases/#function-not-working-with-pipes","title":"Function Not Working with Pipes","text":"<p>Problem: Pipe doesn't work with regular functions</p> <p>Solution: Use the <code>_pipe</code> variants: <pre><code># Wrong\necho \"hello\" | textup\n# Output: (might not work correctly)\n\n# Correct\necho \"hello\" | textup_pipe\n# Output: HELLO\n</code></pre></p>"},{"location":"reference/shell-aliases/#path-issues","title":"Path Issues","text":"<p>Problem: Aliases work, but commands don't execute</p> <p>Solution: <pre><code># Check if cli-utils is in PATH\nwhich cli-utils\n\n# If not, use full path in aliases\ntextup() {\n    ~/bin/cli-utils local text_utils uppercase \"$@\"\n}\n</code></pre></p>"},{"location":"reference/shell-aliases/#performance","title":"Performance","text":"<p>Shell functions add minimal overhead:</p> <ul> <li>Direct command: ~50ms</li> <li>Via alias/function: ~50ms (same, just shell parsing)</li> <li>Via pipe function: ~100ms (extra stdin processing)</li> </ul> <p>For most use cases, the difference is negligible.</p>"},{"location":"reference/shell-aliases/#uninstalling","title":"Uninstalling","text":"<p>To remove the aliases:</p> <pre><code># Remove the source line from ~/.zshrc\n# Then reload\nsource ~/.zshrc\n</code></pre> <p>Or temporarily disable:</p> <pre><code># Unset specific functions\nunset -f textup\nunset -f textlow\n\n# Unalias\nunalias cu\n</code></pre>"},{"location":"reference/shell-aliases/#see-also","title":"See Also","text":"<ul> <li>Installation Guide - Installation guide</li> <li>README.md - Project overview</li> <li>scripts/shell-aliases.sh - Alias definitions</li> </ul>"},{"location":"reference/technical-notes/","title":"Technical Notes","text":""},{"location":"reference/technical-notes/#runtimewarning-fix","title":"RuntimeWarning Fix","text":""},{"location":"reference/technical-notes/#the-problem","title":"The Problem","text":"<p>Previously, when running the CLI with <code>python -m cli_utils.main</code>, you would see:</p> <pre><code>RuntimeWarning: 'cli_utils.main' found in sys.modules after import of package 'cli_utils',\nbut prior to execution of 'cli_utils.main'; this may result in unpredictable behaviour\n</code></pre>"},{"location":"reference/technical-notes/#why-it-happened","title":"Why It Happened","text":"<p>When you run <code>python -m cli_utils.main</code>:</p> <ol> <li>Python loads the package <code>cli_utils</code></li> <li>Then it loads <code>cli_utils.main</code> as the <code>__main__</code> module</li> <li>But code in the package also imports from <code>cli_utils.main</code> (e.g., in <code>__init__.py</code>)</li> <li>This creates two references to the same module:</li> <li>One as <code>__main__</code> (the running module)</li> <li>One as <code>cli_utils.main</code> (the imported module)</li> </ol> <p>Python's import system detects this inconsistency and warns about it because: - The same module code exists in memory twice - Changes to module-level state in one won't reflect in the other - It can lead to subtle bugs (singletons not being singletons, etc.)</p>"},{"location":"reference/technical-notes/#the-solution","title":"The Solution","text":"<p>We created a separate <code>__main__.py</code> entry point:</p> <p>Before: <pre><code>cli_utils/\n\u251c\u2500\u2500 main.py          # Both entry point AND importable module\n\u2514\u2500\u2500 __init__.py      # Imports from main.py\n</code></pre></p> <p>After: <pre><code>cli_utils/\n\u251c\u2500\u2500 __main__.py      # Entry point ONLY (python -m cli_utils)\n\u251c\u2500\u2500 main.py          # Importable module\n\u2514\u2500\u2500 __init__.py      # Imports from main.py\n</code></pre></p> <p>File: <code>src/cli_utils/__main__.py</code> <pre><code>from cli_utils.main import run\n\nif __name__ == \"__main__\":\n    run()\n</code></pre></p> <p>File: <code>src/cli_utils/main.py</code> <pre><code># No more if __name__ == \"__main__\" at the bottom\ndef run() -&gt; None:\n    loader = create_plugin_loader(app)\n    loader.load_all_commands()\n    app()\n</code></pre></p>"},{"location":"reference/technical-notes/#why-this-works","title":"Why This Works","text":"<p>Now when you run <code>python -m cli_utils</code>:</p> <ol> <li>Python looks for <code>cli_utils/__main__.py</code> (standard behavior)</li> <li><code>__main__.py</code> imports and calls <code>run()</code> from <code>cli_utils.main</code></li> <li><code>cli_utils.main</code> exists only as an importable module, not as <code>__main__</code></li> <li>No duplicate module references \u2705</li> <li>No warning \u2705</li> </ol>"},{"location":"reference/technical-notes/#usage","title":"Usage","text":"<p>All these now work cleanly without warnings:</p> <pre><code># Direct module execution\npython -m cli_utils --help\n\n# Via wrapper script\n~/bin/cli-utils --help\n\n# Via uv\nuv run python -m cli_utils --help\n\n# Via entry point (after installation)\ncli-utils --help\n</code></pre>"},{"location":"reference/technical-notes/#related-files-updated","title":"Related Files Updated","text":"<ol> <li><code>src/cli_utils/__main__.py</code> - New entry point</li> <li><code>src/cli_utils/main.py</code> - Removed <code>if __name__ == \"__main__\"</code></li> <li><code>scripts/cli-utils</code> - Changed from <code>-m cli_utils.main</code> to <code>-m cli_utils</code></li> <li><code>pyproject.toml</code> - Entry point already used <code>cli_utils.main:app</code> (no change needed)</li> </ol>"},{"location":"reference/technical-notes/#best-practices","title":"Best Practices","text":"<p>This pattern is the Python standard for packages:</p> <ul> <li><code>__main__.py</code> - Entry point for <code>-m</code> execution</li> <li><code>main.py</code> or similar - Importable application code</li> <li>Keep them separate to avoid circular dependencies and warnings</li> </ul>"},{"location":"reference/technical-notes/#references","title":"References","text":"<ul> <li>PEP 338 - Executing modules as scripts</li> <li>Python Documentation - main</li> <li>Python runpy module</li> </ul>"},{"location":"reference/technical-notes/#additional-technical-decisions","title":"Additional Technical Decisions","text":""},{"location":"reference/technical-notes/#why-three-level-command-hierarchy","title":"Why Three-Level Command Hierarchy?","text":"<pre><code>cli-utils &lt;category&gt; &lt;group&gt; &lt;command&gt;\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          local/      text_    uppercase\n          remote      utils\n</code></pre> <p>Benefits: - Clear organization (local vs remote, by functionality) - Easy to navigate with tab completion - Prevents command name conflicts - Scales well (can add many commands without clutter)</p>"},{"location":"reference/technical-notes/#why-auto-discovery","title":"Why Auto-Discovery?","text":"<p>Instead of manually registering commands, we use:</p> <pre><code>def _load_command_group(self, category_name: str, group_path: Path, ...):\n    for py_file in group_path.glob(\"*.py\"):\n        module = importlib.import_module(module_name)\n        for name, obj in inspect.getmembers(module):\n            if self._is_typer_command(obj):\n                group_app.command()(obj)\n</code></pre> <p>Benefits: - Zero boilerplate for new commands - Just create a file, write a function, done - Less chance of forgetting to register - DRY principle (Don't Repeat Yourself)</p>"},{"location":"reference/technical-notes/#why-separate-configpy","title":"Why Separate config.py?","text":"<p>Configuration is separate from main application logic:</p> <p>Benefits: - Can be imported anywhere without circular dependencies - Testable in isolation - Singleton pattern for settings - Multiple configuration sources (env, yaml, defaults)</p>"},{"location":"reference/technical-notes/#why-uv","title":"Why uv?","text":"<p>We chose <code>uv</code> over <code>pip</code>:</p> <p>Benefits: - 10-100x faster than pip - Better dependency resolution - Built-in virtual environment management - Modern Python packaging tool - Compatible with pip requirements</p>"},{"location":"reference/technical-notes/#file-naming-conventions","title":"File Naming Conventions","text":"<ul> <li><code>lowercase.py</code> - Command modules</li> <li><code>__init__.py</code> - Package markers</li> <li><code>UPPERCASE.md</code> - Documentation (README, INSTALL, etc.)</li> <li><code>Makefile</code> - Build automation (no extension)</li> </ul>"},{"location":"reference/technical-notes/#performance-considerations","title":"Performance Considerations","text":""},{"location":"reference/technical-notes/#plugin-loading","title":"Plugin Loading","text":"<p>Plugin loading happens once at startup:</p> <pre><code>def run():\n    loader = create_plugin_loader(app)\n    loader.load_all_commands()  # ~0.1s for 3 commands\n    app()\n</code></pre> <p>Future optimization: - Lazy loading for large command sets - Caching of command metadata - Async plugin loading</p>"},{"location":"reference/technical-notes/#virtual-environment-usage","title":"Virtual Environment Usage","text":"<p>The wrapper script uses the venv Python directly:</p> <pre><code>\"$VENV_PYTHON\" -m cli_utils \"$@\"\n</code></pre> <p>vs activating the venv:</p> <pre><code>source .venv/bin/activate\npython -m cli_utils \"$@\"\n</code></pre> <p>Benefits of direct execution: - Faster (no shell initialization) - No environment pollution - Works in non-interactive shells</p>"},{"location":"reference/technical-notes/#future-improvements","title":"Future Improvements","text":"<ul> <li>[ ] Command caching for faster subsequent runs</li> <li>[ ] Shell completion generation</li> <li>[ ] Plugin system for third-party commands</li> <li>[ ] Web interface (Flask/FastAPI)</li> <li>[ ] Container support (Podman)</li> <li>[ ] CI/CD pipeline configuration</li> <li>[ ] Pre-commit hooks</li> <li>[ ] Command aliases</li> <li>[ ] Interactive mode (REPL)</li> <li>[ ] Progress bars for long operations</li> </ul>"},{"location":"user-guide/adding-commands/","title":"Adding Commands","text":"<p>One of the key features of CLI Utils is how easy it is to add new commands. This guide will show you how.</p>"},{"location":"user-guide/adding-commands/#command-structure","title":"Command Structure","text":"<p>Commands are organized in a three-level hierarchy:</p> <ol> <li>Category: <code>local</code> or <code>remote</code></li> <li>Group: A functional grouping (e.g., <code>text_utils</code>, <code>file_ops</code>)</li> <li>Command: Individual command files</li> </ol>"},{"location":"user-guide/adding-commands/#creating-a-new-command","title":"Creating a New Command","text":""},{"location":"user-guide/adding-commands/#step-1-choose-location","title":"Step 1: Choose Location","text":"<p>Decide where your command should go:</p> <ul> <li>Local tasks: <code>src/cli_utils/commands/local/&lt;group&gt;/</code></li> <li>Remote API calls: <code>src/cli_utils/commands/remote/&lt;group&gt;/</code></li> </ul>"},{"location":"user-guide/adding-commands/#step-2-create-or-use-a-group","title":"Step 2: Create or Use a Group","text":"<p>Create a new group directory if needed, or use an existing one:</p> <pre><code>mkdir -p src/cli_utils/commands/local/my_group\ntouch src/cli_utils/commands/local/my_group/__init__.py\n</code></pre>"},{"location":"user-guide/adding-commands/#step-3-create-your-command-file","title":"Step 3: Create Your Command File","text":"<p>Create a new Python file with your command:</p> <pre><code># src/cli_utils/commands/local/my_group/hello.py\n\"\"\"Say hello to someone.\n\nThis module provides a simple greeting command.\n\"\"\"\n\nimport typer\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef hello(\n    name: str = typer.Argument(..., help=\"Name to greet\"),\n    formal: bool = typer.Option(False, \"--formal\", \"-f\", help=\"Use formal greeting\"),\n) -&gt; None:\n    \"\"\"Say hello to someone.\n\n    Args:\n        name: The name of the person to greet\n        formal: If True, use a formal greeting\n\n    Example:\n        $ cli-utils local my-group hello Alice\n        Hello, Alice!\n    \"\"\"\n    if formal:\n        greeting = f\"Good day, {name}!\"\n    else:\n        greeting = f\"Hello, {name}!\"\n\n    console.print(f\"[green]{greeting}[/green]\")\n</code></pre>"},{"location":"user-guide/adding-commands/#step-4-thats-it","title":"Step 4: That's It!","text":"<p>Your command is automatically discovered and loaded. No registration needed!</p> <pre><code>cli-utils local my-group hello Alice\n# Output: Hello, Alice!\n\ncli-utils local my-group hello Alice --formal\n# Output: Good day, Alice!\n</code></pre>"},{"location":"user-guide/adding-commands/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/adding-commands/#1-type-hints","title":"1. Type Hints","text":"<p>Always use type hints for better IDE support and documentation:</p> <pre><code>def my_command(\n    text: str,\n    count: int = 1,\n    verbose: bool = False,\n) -&gt; None:\n    ...\n</code></pre>"},{"location":"user-guide/adding-commands/#2-docstrings","title":"2. Docstrings","text":"<p>Write comprehensive docstrings:</p> <pre><code>def my_command(text: str) -&gt; None:\n    \"\"\"Brief description.\n\n    Longer description with more details about what\n    this command does and when to use it.\n\n    Args:\n        text: Description of the text parameter\n\n    Example:\n        $ cli-utils local group my-command \"test\"\n    \"\"\"\n    ...\n</code></pre>"},{"location":"user-guide/adding-commands/#3-use-rich-for-output","title":"3. Use Rich for Output","text":"<p>Use Rich console for beautiful output:</p> <pre><code>from rich.console import Console\nfrom rich.table import Table\nfrom rich.panel import Panel\n\nconsole = Console()\n\ndef my_command() -&gt; None:\n    # Simple colored output\n    console.print(\"[green]Success![/green]\")\n\n    # Tables\n    table = Table(title=\"Results\")\n    table.add_column(\"Name\")\n    table.add_column(\"Value\")\n    console.print(table)\n\n    # Panels\n    console.print(Panel(\"Important message\", border_style=\"cyan\"))\n</code></pre>"},{"location":"user-guide/adding-commands/#4-handle-errors-gracefully","title":"4. Handle Errors Gracefully","text":"<p>Use try-except blocks and provide helpful error messages:</p> <pre><code>def my_command(file_path: str) -&gt; None:\n    try:\n        with open(file_path) as f:\n            content = f.read()\n    except FileNotFoundError:\n        console.print(f\"[red]Error: File not found: {file_path}[/red]\")\n        raise typer.Exit(1)\n</code></pre>"},{"location":"user-guide/adding-commands/#command-templates","title":"Command Templates","text":""},{"location":"user-guide/adding-commands/#simple-command","title":"Simple Command","text":"<pre><code>import typer\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef my_command(\n    arg: str = typer.Argument(..., help=\"Description\"),\n) -&gt; None:\n    \"\"\"Brief description.\"\"\"\n    console.print(f\"[green]{arg}[/green]\")\n</code></pre>"},{"location":"user-guide/adding-commands/#command-with-options","title":"Command with Options","text":"<pre><code>import typer\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef my_command(\n    input_text: str = typer.Argument(..., help=\"Input text\"),\n    output_file: str = typer.Option(None, \"--output\", \"-o\", help=\"Output file\"),\n    verbose: bool = typer.Option(False, \"--verbose\", \"-v\", help=\"Verbose output\"),\n) -&gt; None:\n    \"\"\"Brief description.\"\"\"\n    if verbose:\n        console.print(f\"[dim]Processing: {input_text}[/dim]\")\n\n    # Process...\n\n    if output_file:\n        with open(output_file, \"w\") as f:\n            f.write(result)\n        console.print(f\"[green]Saved to {output_file}[/green]\")\n    else:\n        console.print(result)\n</code></pre>"},{"location":"user-guide/adding-commands/#api-command","title":"API Command","text":"<pre><code>import typer\nimport requests\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef fetch_data(\n    endpoint: str = typer.Argument(..., help=\"API endpoint\"),\n    api_key: str = typer.Option(None, \"--api-key\", help=\"API key\"),\n) -&gt; None:\n    \"\"\"Fetch data from an API.\"\"\"\n    try:\n        headers = {\"Authorization\": f\"Bearer {api_key}\"} if api_key else {}\n        response = requests.get(endpoint, headers=headers, timeout=30)\n        response.raise_for_status()\n\n        data = response.json()\n        console.print(data)\n\n    except requests.RequestException as e:\n        console.print(f\"[red]Error: {e}[/red]\")\n        raise typer.Exit(1)\n</code></pre>"},{"location":"user-guide/adding-commands/#testing-your-command","title":"Testing Your Command","text":"<p>Create tests in <code>src/tests/test_commands/</code>:</p> <pre><code># src/tests/test_commands/test_my_group.py\nfrom cli_utils.commands.local.my_group import hello\n\n\ndef test_hello_command():\n    # Test your command logic\n    ...\n</code></pre> <p>Run tests:</p> <pre><code>pytest\n</code></pre>"},{"location":"user-guide/adding-commands/#using-common-utilities","title":"Using Common Utilities","text":"<p>CLI Utils provides reusable utilities for common patterns like directory browsing, file selection, and output handling. See the Common Utilities guide for details on:</p> <ul> <li>Common Options: Pre-defined <code>Annotated</code> types for <code>--recursive</code>, <code>--browse</code>, <code>--output</code>, <code>--verbose</code></li> <li>Directory Handler: Easy directory selection with file manager support</li> <li>Output Handler: Handle console vs file output with browse mode</li> <li>File Picker: Low-level file manager integration</li> <li>Clipboard: Cross-platform clipboard support</li> </ul> <p>Example using common utilities:</p> <pre><code>from cli_utils.utils.common_options import (\n    BrowseOption,\n    OptionalDirectoryArg,\n    OutputOption,\n    RecursiveOption,\n)\nfrom cli_utils.utils.directory_handler import get_directory\nfrom cli_utils.utils.output_handler import OutputHandler, create_default_filename\n\ndef my_command(\n    directory: OptionalDirectoryArg = None,\n    recursive: RecursiveOption = False,\n    browse: BrowseOption = False,\n    output: OutputOption = None,\n) -&gt; None:\n    \"\"\"My command with common utilities.\"\"\"\n    # Get directory with browse support\n    base_path = get_directory(directory=directory, browse=browse)\n\n    # Process files\n    files = base_path.rglob(\"*.py\") if recursive else base_path.glob(\"*.py\")\n    result = f\"Found {len(list(files))} files\"\n\n    # Handle output\n    handler = OutputHandler(output=output, default_filename=\"report.txt\")\n    handler.save_or_print(result)\n</code></pre> <p>This gives your command automatic support for: - <code>--browse</code> / <code>-b</code> - Interactive directory selection - <code>--recursive</code> / <code>-r</code> - Recursive file search - <code>--output</code> / <code>-o</code> - Save to file or use browse mode for save location</p> <p>See Common Utilities for complete documentation.</p>"},{"location":"user-guide/adding-commands/#next-steps","title":"Next Steps","text":"<ul> <li>Common Utilities - Learn about reusable utilities</li> <li>Command Groups - Organize related commands</li> <li>Examples - See real command examples</li> <li>Command Reference - Browse all available commands</li> </ul>"},{"location":"user-guide/command-groups/","title":"Command Groups","text":"<p>Command groups help organize related commands together for better usability and maintainability.</p>"},{"location":"user-guide/command-groups/#group-structure","title":"Group Structure","text":"<p>CLI Utils uses a hierarchical command structure:</p> <pre><code>cli-utils &lt;category&gt; &lt;group&gt; &lt;command&gt; [arguments] [options]\n</code></pre> <p>Example: <pre><code>cli-utils local text-utils uppercase \"hello\"\n         \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       category    group     command\n</code></pre></p>"},{"location":"user-guide/command-groups/#categories","title":"Categories","text":""},{"location":"user-guide/command-groups/#local-commands","title":"Local Commands","text":"<p>Commands that run locally on your machine:</p> <ul> <li>File operations</li> <li>Text processing</li> <li>System utilities</li> <li>Data manipulation</li> </ul> <p>Path: <code>src/cli_utils/commands/local/&lt;group&gt;/</code></p>"},{"location":"user-guide/command-groups/#remote-commands","title":"Remote Commands","text":"<p>Commands that interact with remote APIs:</p> <ul> <li>API calls</li> <li>Web scraping</li> <li>Cloud service management</li> <li>Data fetching</li> </ul> <p>Path: <code>src/cli_utils/commands/remote/&lt;group&gt;/</code></p>"},{"location":"user-guide/command-groups/#creating-a-new-group","title":"Creating a New Group","text":"<ol> <li>Create a directory under the appropriate category:</li> </ol> <pre><code>mkdir -p src/cli_utils/commands/local/my_new_group\n</code></pre> <ol> <li>Add an <code>__init__.py</code> file:</li> </ol> <pre><code>touch src/cli_utils/commands/local/my_new_group/__init__.py\n</code></pre> <ol> <li>Add command files:</li> </ol> <pre><code>touch src/cli_utils/commands/local/my_new_group/command1.py\ntouch src/cli_utils/commands/local/my_new_group/command2.py\n</code></pre> <p>That's it! The group is automatically discovered and available via CLI.</p>"},{"location":"user-guide/command-groups/#example-groups","title":"Example Groups","text":""},{"location":"user-guide/command-groups/#text-utils-text_utils","title":"Text Utils (<code>text_utils</code>)","text":"<p>Text manipulation commands:</p> <pre><code>cli-utils local text-utils uppercase \"text\"\ncli-utils local text-utils lowercase \"TEXT\"\ncli-utils local text-utils titlecase \"text\"\n</code></pre>"},{"location":"user-guide/command-groups/#file-operations-file_ops","title":"File Operations (<code>file_ops</code>)","text":"<p>File manipulation commands (to be implemented):</p> <pre><code>cli-utils local file-ops copy source.txt dest.txt\ncli-utils local file-ops rename old.txt new.txt\n</code></pre>"},{"location":"user-guide/command-groups/#system-info-system_info","title":"System Info (<code>system_info</code>)","text":"<p>System information commands (to be implemented):</p> <pre><code>cli-utils local system-info disk-usage\ncli-utils local system-info cpu-info\n</code></pre>"},{"location":"user-guide/command-groups/#group-naming-conventions","title":"Group Naming Conventions","text":"<ul> <li>Use lowercase with underscores: <code>text_utils</code>, <code>file_ops</code></li> <li>CLI automatically converts to kebab-case: <code>text-utils</code>, <code>file-ops</code></li> <li>Choose descriptive, functional names</li> <li>Keep group names concise but clear</li> </ul>"},{"location":"user-guide/command-groups/#group-organization-tips","title":"Group Organization Tips","text":"<ol> <li>Logical grouping: Group commands by functionality, not implementation</li> <li>Flat is better: Avoid deep nesting; keep it at 3 levels maximum</li> <li>Single responsibility: Each group should have a clear, focused purpose</li> <li>Reasonable size: Aim for 5-15 commands per group</li> </ol>"},{"location":"user-guide/command-groups/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to Add Commands</li> <li>Check out Examples</li> </ul>"},{"location":"user-guide/common-utilities/","title":"Common Utilities","text":"<p>This guide explains the reusable utilities available in CLI Utils that make it easy to add common functionality to your commands.</p>"},{"location":"user-guide/common-utilities/#overview","title":"Overview","text":"<p>CLI Utils provides a set of common utilities that implement frequently-used patterns like directory browsing, file selection, output handling, and more. Using these utilities ensures consistency across commands and reduces code duplication.</p>"},{"location":"user-guide/common-utilities/#available-utilities","title":"Available Utilities","text":""},{"location":"user-guide/common-utilities/#cli-options-cli_utilsutilscommon_options","title":"CLI Options (<code>cli_utils.utils.common_options</code>)","text":"<p>Pre-defined <code>Annotated</code> types for common CLI options that you can use directly in your command functions.</p>"},{"location":"user-guide/common-utilities/#recursiveoption","title":"<code>RecursiveOption</code>","text":"<p>Add a <code>--recursive/-r</code> option to search directories recursively.</p> <p>Usage: <pre><code>from cli_utils.utils.common_options import RecursiveOption\n\ndef my_command(\n    recursive: RecursiveOption = False,\n) -&gt; None:\n    \"\"\"My command with recursive option.\"\"\"\n    if recursive:\n        # Search recursively\n        files = path.rglob(\"*.py\")\n    else:\n        # Search only current directory\n        files = path.glob(\"*.py\")\n</code></pre></p> <p>What it provides: - Option: <code>--recursive</code> / <code>-r</code> - Type: <code>bool</code> - Default: <code>False</code> - Help text: \"Search directories recursively\"</p>"},{"location":"user-guide/common-utilities/#browseoption","title":"<code>BrowseOption</code>","text":"<p>Add a <code>--browse/-b</code> option to interactively select directories using a file manager.</p> <p>Usage: <pre><code>from cli_utils.utils.common_options import BrowseOption\n\ndef my_command(\n    browse: BrowseOption = False,\n) -&gt; None:\n    \"\"\"My command with browse option.\"\"\"\n    # Use with directory_handler (see below)\n</code></pre></p> <p>What it provides: - Option: <code>--browse</code> / <code>-b</code> - Type: <code>bool</code> - Default: <code>False</code> - Help text: \"Browse for directory using file manager (yazi/mc)\"</p>"},{"location":"user-guide/common-utilities/#outputoption","title":"<code>OutputOption</code>","text":"<p>Add a <code>--output/-o</code> option to save command output to a file.</p> <p>Usage: <pre><code>from cli_utils.utils.common_options import OutputOption\n\ndef my_command(\n    output: OutputOption = None,\n) -&gt; None:\n    \"\"\"My command with output option.\"\"\"\n    # Use with output_handler (see below)\n</code></pre></p> <p>What it provides: - Option: <code>--output</code> / <code>-o</code> - Type: <code>Optional[str]</code> - Default: <code>None</code> - Help text: \"Save output to file (use 'browse' to select location interactively)\" - Special value: <code>\"browse\"</code> for interactive file selection</p>"},{"location":"user-guide/common-utilities/#verboseoption","title":"<code>VerboseOption</code>","text":"<p>Add a <code>--verbose/-v</code> option for detailed output.</p> <p>Usage: <pre><code>from cli_utils.utils.common_options import VerboseOption\n\ndef my_command(\n    verbose: VerboseOption = False,\n) -&gt; None:\n    \"\"\"My command with verbose option.\"\"\"\n    if verbose:\n        console.print(\"[dim]Detailed information...[/dim]\")\n</code></pre></p> <p>What it provides: - Option: <code>--verbose</code> / <code>-v</code> - Type: <code>bool</code> - Default: <code>False</code> - Help text: \"Show detailed output\"</p>"},{"location":"user-guide/common-utilities/#optionaldirectoryarg","title":"<code>OptionalDirectoryArg</code>","text":"<p>Add an optional directory argument (positional parameter).</p> <p>Usage: <pre><code>from cli_utils.utils.common_options import OptionalDirectoryArg\n\ndef my_command(\n    directory: OptionalDirectoryArg = None,\n) -&gt; None:\n    \"\"\"My command with optional directory argument.\"\"\"\n    # Use with directory_handler (see below)\n</code></pre></p> <p>What it provides: - Argument: <code>[DIRECTORY]</code> - Type: <code>Optional[str]</code> - Default: <code>None</code> - Help text: \"Directory to analyze (defaults to current directory)\"</p>"},{"location":"user-guide/common-utilities/#directory-handler-cli_utilsutilsdirectory_handler","title":"Directory Handler (<code>cli_utils.utils.directory_handler</code>)","text":"<p>Utilities for handling directory selection with support for browse mode.</p>"},{"location":"user-guide/common-utilities/#get_directory","title":"<code>get_directory()</code>","text":"<p>Get a directory path from argument, browse mode, or default.</p> <p>Function Signature: <pre><code>def get_directory(\n    directory: Optional[str] = None,\n    browse: bool = False,\n    default: str = \".\"\n) -&gt; Path\n</code></pre></p> <p>Parameters: - <code>directory</code> - Directory path from command argument - <code>browse</code> - Whether to use interactive file browser - <code>default</code> - Default directory if none provided (default: <code>\".\"</code>)</p> <p>Returns: - <code>Path</code> object for the selected directory</p> <p>Raises: - <code>typer.Abort</code> if browse mode is cancelled</p> <p>Usage: <pre><code>from pathlib import Path\nfrom cli_utils.utils.common_options import BrowseOption, OptionalDirectoryArg\nfrom cli_utils.utils.directory_handler import get_directory\n\ndef my_command(\n    directory: OptionalDirectoryArg = None,\n    browse: BrowseOption = False,\n) -&gt; None:\n    \"\"\"Analyze files in a directory.\"\"\"\n    # Handles browse mode, provided directory, or default\n    base_path = get_directory(directory=directory, browse=browse)\n\n    # Now you have a Path object to work with\n    files = list(base_path.glob(\"*.py\"))\n</code></pre></p> <p>What it does: 1. If <code>browse=True</code>: Opens file manager for interactive selection 2. Else if <code>directory</code> is provided: Uses that path 3. Else: Uses the <code>default</code> directory 4. Returns resolved <code>Path</code> object 5. Shows confirmation message when browsing</p> <p>Supported File Managers: - yazi (recommended) - Modern, fast terminal file manager - mc (Midnight Commander) - Classic dual-pane file manager - ranger - Vim-like file manager - lf - Simple terminal file manager</p>"},{"location":"user-guide/common-utilities/#output-handler-cli_utilsutilsoutput_handler","title":"Output Handler (<code>cli_utils.utils.output_handler</code>)","text":"<p>Utilities for handling command output (console or file) with support for interactive file selection.</p>"},{"location":"user-guide/common-utilities/#outputhandler-class","title":"<code>OutputHandler</code> Class","text":"<p>Manages output destination (console vs file) with browse mode support.</p> <p>Class Signature: <pre><code>class OutputHandler:\n    def __init__(\n        self,\n        output: Optional[str] = None,\n        default_filename: str = \"output.txt\",\n        start_dir: str = \".\"\n    )\n</code></pre></p> <p>Parameters: - <code>output</code> - Output specification (None=console, \"browse\"=interactive, or file path) - <code>default_filename</code> - Default filename for browse mode - <code>start_dir</code> - Starting directory for file browser</p> <p>Methods:</p>"},{"location":"user-guide/common-utilities/#determine_output_path-optionalstr","title":"<code>determine_output_path() -&gt; Optional[str]</code>","text":"<p>Determine the output file path based on configuration.</p> <p>Returns: - File path to save to, or <code>None</code> if outputting to console</p> <p>Raises: - <code>typer.Abort</code> if browse mode is cancelled</p>"},{"location":"user-guide/common-utilities/#save_or_printcontent-str-none","title":"<code>save_or_print(content: str) -&gt; None</code>","text":"<p>Save content to file or print to console.</p> <p>Parameters: - <code>content</code> - String content to output</p> <p>Usage: <pre><code>from cli_utils.utils.common_options import OutputOption\nfrom cli_utils.utils.output_handler import OutputHandler, create_default_filename\n\ndef my_command(\n    output: OutputOption = None,\n    format: str = \"text\",\n) -&gt; None:\n    \"\"\"Generate a report.\"\"\"\n    # Set up output handler with appropriate filename\n    extension_map = {\"text\": \"txt\", \"json\": \"json\", \"markdown\": \"md\"}\n    default_filename = create_default_filename(\"my_report\", format, extension_map)\n    handler = OutputHandler(output=output, default_filename=default_filename)\n\n    # Generate your content\n    report_content = generate_report()\n\n    # Handle output automatically\n    if handler.determine_output_path():\n        # Will save to file\n        handler.save_or_print(report_content)\n    else:\n        # Will print to console (you can use rich formatting here)\n        console.print(report_content)\n</code></pre></p>"},{"location":"user-guide/common-utilities/#helper-functions","title":"Helper Functions","text":""},{"location":"user-guide/common-utilities/#create_default_filename","title":"<code>create_default_filename()</code>","text":"<p>Create a default filename based on format.</p> <p>Function Signature: <pre><code>def create_default_filename(\n    base_name: str,\n    format_type: str,\n    format_map: dict[str, str]\n) -&gt; str\n</code></pre></p> <p>Parameters: - <code>base_name</code> - Base name for the file (e.g., \"report\", \"metrics\") - <code>format_type</code> - The format type (e.g., \"json\", \"text\") - <code>format_map</code> - Dict mapping format types to file extensions</p> <p>Returns: - Filename with appropriate extension (e.g., \"report.json\")</p> <p>Example: <pre><code>from cli_utils.utils.output_handler import create_default_filename\n\nextension_map = {\"text\": \"txt\", \"json\": \"json\", \"markdown\": \"md\"}\nfilename = create_default_filename(\"metrics\", \"json\", extension_map)\n# Returns: \"metrics.json\"\n</code></pre></p>"},{"location":"user-guide/common-utilities/#get_extension_for_format","title":"<code>get_extension_for_format()</code>","text":"<p>Get file extension for a format type.</p> <p>Function Signature: <pre><code>def get_extension_for_format(\n    format_type: str,\n    format_map: dict[str, str]\n) -&gt; str\n</code></pre></p>"},{"location":"user-guide/common-utilities/#file-picker-cli_utilsutilsfile_picker","title":"File Picker (<code>cli_utils.utils.file_picker</code>)","text":"<p>Low-level utilities for file manager integration.</p>"},{"location":"user-guide/common-utilities/#pick_directory","title":"<code>pick_directory()</code>","text":"<p>Launch file manager to select a directory.</p> <p>Function Signature: <pre><code>def pick_directory(\n    start_dir: str = \".\",\n    preferred_manager: Optional[FileManager] = None,\n) -&gt; Optional[str]\n</code></pre></p> <p>Parameters: - <code>start_dir</code> - Starting directory for file manager - <code>preferred_manager</code> - Specific file manager to use (\"yazi\", \"mc\", \"ranger\", \"lf\")</p> <p>Returns: - Selected directory path, or <code>None</code> if cancelled</p> <p>Note: Usually you should use <code>get_directory()</code> instead, which wraps this function.</p>"},{"location":"user-guide/common-utilities/#save_file","title":"<code>save_file()</code>","text":"<p>Launch file manager to select a save location.</p> <p>Function Signature: <pre><code>def save_file(\n    default_filename: str = \"output.txt\",\n    start_dir: str = \".\",\n    preferred_manager: Optional[FileManager] = None,\n) -&gt; Optional[str]\n</code></pre></p> <p>Parameters: - <code>default_filename</code> - Suggested filename - <code>start_dir</code> - Starting directory - <code>preferred_manager</code> - Specific file manager to use</p> <p>Returns: - Selected file path (directory + filename), or <code>None</code> if cancelled</p> <p>Note: Usually you should use <code>OutputHandler</code> instead, which wraps this function.</p>"},{"location":"user-guide/common-utilities/#icons-cli_utilsutilsicons","title":"Icons (<code>cli_utils.utils.icons</code>)","text":"<p>Smart icon system with automatic Nerd Font detection and fallback support.</p>"},{"location":"user-guide/common-utilities/#icon-system-overview","title":"Icon System Overview","text":"<p>CLI Utils includes an intelligent icon system that automatically adapts to your terminal's capabilities:</p> <ol> <li>Nerd Font Icons - If you have Nerd Fonts installed, beautiful icons are used</li> <li>Emoji Fallback - If your terminal supports emoji, Unicode emoji are used</li> <li>Text Fallback - Simple ASCII text representations for basic terminals</li> </ol> <p>The system detects your setup automatically on first run!</p>"},{"location":"user-guide/common-utilities/#using-predefined-icons","title":"Using Predefined Icons","text":"<p>The easiest way to use icons is through the <code>Icons</code> class:</p> <p>Usage: <pre><code>from cli_utils.utils.icons import Icons\n\ndef my_command():\n    \"\"\"Command using predefined icons.\"\"\"\n    console.print(f\"{Icons.check()} Task completed\")\n    console.print(f\"{Icons.cross()} Operation failed\")\n    console.print(f\"{Icons.calendar()} Due: 2025-11-01\")\n    console.print(f\"{Icons.clock()} Reminder set\")\n</code></pre></p> <p>Available Icons:</p> Method Nerd Font Emoji Text <code>Icons.check()</code> \udb80\udd2c \u2705 [\u2713] <code>Icons.cross()</code> \udb80\udd56 \u274c [\u2717] <code>Icons.circle()</code> \udb80\udd30 \u2b55 [ ] <code>Icons.play()</code> \udb81\udc0a \u25b6\ufe0f [&gt;] <code>Icons.calendar()</code> \udb80\udcee \ud83d\udcc5 [DATE] <code>Icons.clock()</code> \udb82\udd54 \u23f0 [TIME] <code>Icons.list()</code> \udb80\ude79 \ud83d\udccb [LIST] <code>Icons.folder()</code> \udb80\ude4b \ud83d\udcc1 [FOLDER] <code>Icons.file()</code> \udb80\ude19 \ud83d\udcc4 [FILE] <code>Icons.info()</code> \udb80\udefd \u2139\ufe0f [i] <code>Icons.warning()</code> \udb80\udc2a \u26a0\ufe0f [!] <code>Icons.star()</code> \udb81\udcce \u2b50 [*] <code>Icons.tag()</code> \udb81\udcf9 \ud83c\udff7\ufe0f [TAG]"},{"location":"user-guide/common-utilities/#using-custom-icons","title":"Using Custom Icons","text":"<p>For custom icons, use the <code>icon()</code> function:</p> <p>Function Signature: <pre><code>def icon(\n    nerd_icon_name: str,\n    emoji_char: str,\n    fallback: str\n) -&gt; str\n</code></pre></p> <p>Parameters: - <code>nerd_icon_name</code> - Nerd Font icon name (e.g., \"nf-md-rocket\") - <code>emoji_char</code> - Emoji character to use as fallback - <code>fallback</code> - Plain text string as final fallback</p> <p>Usage: <pre><code>from cli_utils.utils.icons import icon\n\ndef my_command():\n    \"\"\"Command using custom icons.\"\"\"\n    rocket = icon(\"nf-md-rocket\", \"\ud83d\ude80\", \"[ROCKET]\")\n    console.print(f\"{rocket} Launching...\")\n\n    heart = icon(\"nf-md-heart\", \"\u2764\ufe0f\", \"[LOVE]\")\n    console.print(f\"{heart} Favorite item\")\n</code></pre></p>"},{"location":"user-guide/common-utilities/#icon-manager","title":"Icon Manager","text":"<p>For advanced usage, you can work with the <code>IconManager</code> directly:</p> <p>Usage: <pre><code>from cli_utils.utils.icons import get_icon_manager\n\ndef my_command():\n    \"\"\"Command checking icon support.\"\"\"\n    manager = get_icon_manager()\n\n    # Check what's being used\n    if manager._nerd_font_support == 1:\n        console.print(\"Using Nerd Font icons!\")\n    elif manager._terminal_supports_emoji:\n        console.print(\"Using emoji icons\")\n    else:\n        console.print(\"Using text icons\")\n</code></pre></p>"},{"location":"user-guide/common-utilities/#real-world-example","title":"Real-World Example","text":"<p>Here's how the TODO app uses icons:</p> <pre><code>from cli_utils.utils.icons import Icons\n\nclass TaskItem:\n    \"\"\"Display a task with status icon.\"\"\"\n\n    def render(self, status: str, text: str, due_date: str = None):\n        # Get appropriate status icon\n        status_icons = {\n            \"new\": Icons.circle(),\n            \"in_progress\": Icons.play(),\n            \"completed\": Icons.check()\n        }\n        icon = status_icons.get(status, Icons.circle())\n\n        # Build display\n        parts = [f\"{icon} {text}\"]\n\n        if due_date:\n            parts.append(f\"{Icons.calendar()} {due_date}\")\n\n        return \" \".join(parts)\n</code></pre> <p>Output examples: - With Nerd Fonts: <code>\udb80\udd30 Buy groceries \udb80\udcee 2025-11-01</code> - With Emoji: <code>\u2b55 Buy groceries \ud83d\udcc5 2025-11-01</code> - Text fallback: <code>[ ] Buy groceries [DATE] 2025-11-01</code></p>"},{"location":"user-guide/common-utilities/#testing-icons","title":"Testing Icons","text":"<p>When testing, you can control icon behavior:</p> <pre><code>from cli_utils.utils.icons import IconManager\n\ndef test_with_nerd_fonts():\n    \"\"\"Test with Nerd Fonts enabled.\"\"\"\n    manager = IconManager(nerd_font_support=1)\n    icon_str = manager.icon(\"nf-md-check\", \"\u2705\", \"[DONE]\")\n    # Will use Nerd Font icon\n\ndef test_without_nerd_fonts():\n    \"\"\"Test with Nerd Fonts disabled.\"\"\"\n    manager = IconManager(nerd_font_support=0)\n    icon_str = manager.icon(\"nf-md-check\", \"\u2705\", \"[DONE]\")\n    # Will use emoji or text based on terminal\n</code></pre>"},{"location":"user-guide/common-utilities/#clipboard-cli_utilsutilsclipboard","title":"Clipboard (<code>cli_utils.utils.clipboard</code>)","text":"<p>Cross-platform clipboard utilities.</p>"},{"location":"user-guide/common-utilities/#copy_to_clipboard","title":"<code>copy_to_clipboard()</code>","text":"<p>Copy text to system clipboard.</p> <p>Function Signature: <pre><code>def copy_to_clipboard(text: str) -&gt; bool\n</code></pre></p> <p>Parameters: - <code>text</code> - String to copy to clipboard</p> <p>Returns: - <code>True</code> if successful, <code>False</code> otherwise</p> <p>Usage: <pre><code>from cli_utils.utils.clipboard import copy_to_clipboard\n\ndef my_command(\n    text: str,\n    copy: bool = typer.Option(False, \"--copy\", \"-c\"),\n) -&gt; None:\n    \"\"\"Transform text and optionally copy to clipboard.\"\"\"\n    result = text.upper()\n    console.print(f\"[green]{result}[/green]\")\n\n    if copy:\n        copy_to_clipboard(result)\n</code></pre></p> <p>Supported Clipboard Tools: - Linux: xclip, xsel, wl-clipboard - macOS: pbcopy (built-in) - Windows: clip (built-in) - Fallback: pyperclip Python package</p>"},{"location":"user-guide/common-utilities/#complete-example","title":"Complete Example","text":"<p>Here's a complete example showing how to use multiple common utilities together:</p> <pre><code>\"\"\"Example command using common utilities.\"\"\"\n\nfrom typing import Literal\nimport typer\nfrom rich.console import Console\n\nfrom cli_utils.utils.common_options import (\n    BrowseOption,\n    OptionalDirectoryArg,\n    OutputOption,\n    RecursiveOption,\n    VerboseOption,\n)\nfrom cli_utils.utils.directory_handler import get_directory\nfrom cli_utils.utils.output_handler import OutputHandler, create_default_filename\n\nconsole = Console()\n\n\ndef analyze_files(\n    directory: OptionalDirectoryArg = None,\n    recursive: RecursiveOption = False,\n    format: Literal[\"text\", \"json\"] = typer.Option(\"text\", \"--format\", \"-f\"),\n    browse: BrowseOption = False,\n    verbose: VerboseOption = False,\n    output: OutputOption = None,\n) -&gt; None:\n    \"\"\"Analyze files in a directory.\n\n    Args:\n        directory: Directory to analyze (defaults to current directory)\n        recursive: If True, search subdirectories recursively\n        format: Output format (text or json)\n        browse: If True, use file manager to select directory\n        verbose: If True, show detailed output\n        output: Save output to file (use 'browse' to select location)\n\n    Example:\n        $ cli-utils local mygroup analyze-files .\n        $ cli-utils local mygroup analyze-files --browse --recursive\n        $ cli-utils local mygroup analyze-files -b -r -f json -o browse\n    \"\"\"\n    # 1. Get directory (handles browse mode)\n    base_path = get_directory(directory=directory, browse=browse)\n\n    if verbose:\n        console.print(f\"[dim]Analyzing: {base_path}[/dim]\")\n\n    # 2. Find files (using recursive option)\n    if recursive:\n        files = list(base_path.rglob(\"*.py\"))\n    else:\n        files = list(base_path.glob(\"*.py\"))\n\n    if verbose:\n        console.print(f\"[dim]Found {len(files)} files[/dim]\")\n\n    # 3. Process files and generate output\n    if format == \"json\":\n        import json\n        result = json.dumps({\"files\": [str(f) for f in files]}, indent=2)\n    else:\n        result = f\"Found {len(files)} Python files in {base_path}\"\n\n    # 4. Handle output (console or file, with browse support)\n    extension_map = {\"text\": \"txt\", \"json\": \"json\"}\n    default_filename = create_default_filename(\"analysis\", format, extension_map)\n    handler = OutputHandler(output=output, default_filename=default_filename)\n\n    if handler.determine_output_path():\n        # Save to file\n        handler.save_or_print(result)\n    else:\n        # Print to console\n        console.print(result)\n</code></pre> <p>This example supports all these usage patterns:</p> <pre><code># Basic usage\ncli-utils local mygroup analyze-files .\n\n# Browse for directory\ncli-utils local mygroup analyze-files --browse\n\n# Recursive search\ncli-utils local mygroup analyze-files . --recursive\n\n# Verbose output\ncli-utils local mygroup analyze-files . --verbose\n\n# JSON format\ncli-utils local mygroup analyze-files . --format json\n\n# Save to specific file\ncli-utils local mygroup analyze-files . --output report.txt\n\n# Browse for save location\ncli-utils local mygroup analyze-files . --output browse\n\n# Combine everything\ncli-utils local mygroup analyze-files -b -r -v -f json -o browse\n</code></pre>"},{"location":"user-guide/common-utilities/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/common-utilities/#1-use-common-options-for-consistency","title":"1. Use Common Options for Consistency","text":"<p>Always use the pre-defined option types for common features:</p> <pre><code># \u2705 Good - Uses common options\nfrom cli_utils.utils.common_options import RecursiveOption\n\ndef my_command(recursive: RecursiveOption = False):\n    pass\n\n# \u274c Bad - Reimplements the same thing\ndef my_command(recursive: bool = typer.Option(False, \"-r\", \"--recursive\")):\n    pass\n</code></pre>"},{"location":"user-guide/common-utilities/#2-combine-directory-handler-with-browse-option","title":"2. Combine Directory Handler with Browse Option","text":"<p>Always use <code>get_directory()</code> when you have a browse option:</p> <pre><code># \u2705 Good - Uses directory handler\nfrom cli_utils.utils.directory_handler import get_directory\n\ndef my_command(directory: OptionalDirectoryArg = None, browse: BrowseOption = False):\n    base_path = get_directory(directory=directory, browse=browse)\n\n# \u274c Bad - Reimplements directory handling\ndef my_command(directory: Optional[str] = None, browse: bool = False):\n    if browse:\n        # ... custom browse logic ...\n    else:\n        base_path = Path(directory or \".\")\n</code></pre>"},{"location":"user-guide/common-utilities/#3-use-output-handler-for-file-saving","title":"3. Use Output Handler for File Saving","text":"<p>Always use <code>OutputHandler</code> for commands that can save output:</p> <pre><code># \u2705 Good - Uses output handler\nfrom cli_utils.utils.output_handler import OutputHandler, create_default_filename\n\ndef my_command(output: OutputOption = None):\n    handler = OutputHandler(output=output, default_filename=\"report.txt\")\n    handler.save_or_print(content)\n\n# \u274c Bad - Manual file handling\ndef my_command(output: Optional[str] = None):\n    if output:\n        with open(output, 'w') as f:\n            f.write(content)\n    else:\n        print(content)\n</code></pre>"},{"location":"user-guide/common-utilities/#4-provide-appropriate-default-filenames","title":"4. Provide Appropriate Default Filenames","text":"<p>Use format-specific extensions in default filenames:</p> <pre><code># \u2705 Good - Format-specific filename\nextension_map = {\"text\": \"txt\", \"json\": \"json\", \"markdown\": \"md\"}\ndefault_filename = create_default_filename(\"report\", format, extension_map)\n\n# \u274c Bad - Generic filename\ndefault_filename = \"output.txt\"  # Doesn't respect format\n</code></pre>"},{"location":"user-guide/common-utilities/#5-handle-browse-cancellation","title":"5. Handle Browse Cancellation","text":"<p>The utility functions handle cancellation automatically:</p> <pre><code># \u2705 Good - Utilities handle cancellation with typer.Abort()\nbase_path = get_directory(directory=directory, browse=browse)\n# If user cancels, typer.Abort() is raised automatically\n\n# No need to manually check for None\n</code></pre>"},{"location":"user-guide/common-utilities/#testing-commands-with-common-utilities","title":"Testing Commands with Common Utilities","text":"<p>When testing commands that use common utilities:</p> <pre><code>import pytest\nfrom pathlib import Path\n\ndef test_my_command_basic(tmp_path):\n    \"\"\"Test without browse mode.\"\"\"\n    from cli_utils.commands.local.mygroup.mycommand import my_command\n\n    # Create test directory\n    test_dir = tmp_path / \"test\"\n    test_dir.mkdir()\n    (test_dir / \"test.py\").write_text(\"# test\")\n\n    # Test with direct path (no browse)\n    my_command(directory=str(test_dir), browse=False)\n\ndef test_my_command_with_output(tmp_path):\n    \"\"\"Test output to file.\"\"\"\n    output_file = tmp_path / \"output.txt\"\n    my_command(output=str(output_file))\n\n    assert output_file.exists()\n    content = output_file.read_text()\n    assert len(content) &gt; 0\n</code></pre>"},{"location":"user-guide/common-utilities/#migration-guide","title":"Migration Guide","text":"<p>If you have existing commands that implement these patterns manually, here's how to migrate:</p>"},{"location":"user-guide/common-utilities/#before-manual-implementation","title":"Before (Manual Implementation)","text":"<pre><code>def old_command(\n    directory: Optional[str] = typer.Argument(None),\n    recursive: bool = typer.Option(False, \"--recursive\", \"-r\"),\n    output: Optional[str] = typer.Option(None, \"--output\", \"-o\"),\n):\n    # Manual directory handling\n    base_path = Path(directory or \".\").resolve()\n\n    # Manual recursive search\n    if recursive:\n        files = base_path.rglob(\"*.py\")\n    else:\n        files = base_path.glob(\"*.py\")\n\n    # Manual output handling\n    result = generate_output()\n    if output:\n        Path(output).write_text(result)\n    else:\n        print(result)\n</code></pre>"},{"location":"user-guide/common-utilities/#after-using-common-utilities","title":"After (Using Common Utilities)","text":"<pre><code>from cli_utils.utils.common_options import (\n    OptionalDirectoryArg,\n    RecursiveOption,\n    OutputOption,\n)\nfrom cli_utils.utils.directory_handler import get_directory\nfrom cli_utils.utils.output_handler import OutputHandler\n\ndef new_command(\n    directory: OptionalDirectoryArg = None,\n    recursive: RecursiveOption = False,\n    output: OutputOption = None,\n):\n    # Automatic directory handling (no browse support yet, but easy to add)\n    base_path = get_directory(directory=directory, browse=False)\n\n    # Same recursive search\n    if recursive:\n        files = base_path.rglob(\"*.py\")\n    else:\n        files = base_path.glob(\"*.py\")\n\n    # Automatic output handling with browse support\n    result = generate_output()\n    handler = OutputHandler(output=output, default_filename=\"report.txt\")\n    handler.save_or_print(result)\n</code></pre>"},{"location":"user-guide/common-utilities/#see-also","title":"See Also","text":"<ul> <li>Adding Commands - How to create new commands</li> <li>Command Reference - Documentation of all commands</li> <li>Devtools Examples - Real-world usage of common utilities</li> </ul>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>CLI Utils supports multiple configuration sources to customize its behavior.</p>"},{"location":"user-guide/configuration/#configuration-sources","title":"Configuration Sources","text":"<p>Configuration is loaded in the following priority order (later sources override earlier ones):</p> <ol> <li>Default values</li> <li>YAML configuration file</li> <li>Environment variables</li> </ol>"},{"location":"user-guide/configuration/#configuration-file","title":"Configuration File","text":"<p>The main configuration file is located at:</p> <pre><code>~/.config/cli_utils/config.yaml\n</code></pre>"},{"location":"user-guide/configuration/#example-configuration","title":"Example Configuration","text":"<pre><code># Display settings\ndisplay:\n  nerd_font_support: 1  # Auto-detected (1=enabled, 0=disabled)\n\n# API settings\napi:\n  timeout: 60\n  max_retries: 5\n  github:\n    token: your_github_token_here\n\n# Feature flags\nfeatures:\n  debug: false\n  experimental: false\n\n# Custom settings\npreferences:\n  output_format: json\n  color_scheme: dark\n</code></pre>"},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables can be used to override settings:</p> <ul> <li><code>CLI_UTILS_LOG_LEVEL</code>: Set logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</li> <li><code>CLI_UTILS_API_TIMEOUT</code>: Set API timeout in seconds</li> <li><code>CLI_UTILS_MAX_RETRIES</code>: Set maximum number of retries for API calls</li> <li><code>CLI_UTILS_CONFIG_DIR</code>: Override the configuration directory location</li> </ul>"},{"location":"user-guide/configuration/#example","title":"Example","text":"<pre><code>export CLI_UTILS_LOG_LEVEL=DEBUG\nexport CLI_UTILS_API_TIMEOUT=60\ncli-utils local text-utils uppercase \"hello\"\n</code></pre>"},{"location":"user-guide/configuration/#accessing-configuration-in-commands","title":"Accessing Configuration in Commands","text":"<p>You can access configuration in your commands using the <code>get_settings()</code> function:</p> <pre><code>from cli_utils.config import get_settings\n\ndef my_command():\n    settings = get_settings()\n\n    # Access built-in settings\n    timeout = settings.api_timeout\n\n    # Access custom config with dot notation\n    github_token = settings.get(\"api.github.token\")\n    output_format = settings.get(\"preferences.output_format\", \"json\")\n</code></pre>"},{"location":"user-guide/configuration/#icon-and-display-settings","title":"Icon and Display Settings","text":""},{"location":"user-guide/configuration/#nerd-font-support","title":"Nerd Font Support","text":"<p>CLI Utils automatically detects if you have Nerd Fonts installed on your system. Nerd Fonts provide beautiful icons that enhance the visual appearance of the TODO app and other components.</p> <p>The detection happens automatically on first run and the result is saved to your config file:</p> <pre><code>display:\n  nerd_font_support: 1  # 1 = Nerd Fonts available, 0 = not available\n</code></pre>"},{"location":"user-guide/configuration/#check-nerd-font-status","title":"Check Nerd Font Status","text":"<p>You can check if Nerd Fonts are detected:</p> <pre><code>make check-nerdfonts\n</code></pre> <p>This will show: - Whether Nerd Fonts are installed - List of detected Nerd Fonts (if any) - Instructions for installing Nerd Fonts</p>"},{"location":"user-guide/configuration/#icon-fallback-system","title":"Icon Fallback System","text":"<p>The icon system has a 3-tier fallback mechanism:</p> <ol> <li>Nerd Font Icons (if available) - Beautiful, consistent icons</li> <li>Emoji (if terminal supports them) - Unicode emoji characters</li> <li>Text Representation (always works) - Simple ASCII characters</li> </ol> <p>This ensures the app works perfectly regardless of your font setup!</p>"},{"location":"user-guide/configuration/#installing-nerd-fonts","title":"Installing Nerd Fonts","text":"<p>To get the best visual experience:</p> <ol> <li>Visit Nerd Fonts Downloads</li> <li>Download and install your preferred font (FiraCode, JetBrainsMono, Hack, etc.)</li> <li>Configure your terminal to use the Nerd Font</li> <li>Restart your terminal</li> <li>Run <code>make check-nerdfonts</code> to verify detection</li> </ol>"},{"location":"user-guide/configuration/#manual-override","title":"Manual Override","text":"<p>If you want to force enable or disable Nerd Font usage, edit your config file:</p> <pre><code>display:\n  nerd_font_support: 0  # Force disable Nerd Fonts\n</code></pre> <p>Then restart the application. To re-enable auto-detection, delete this line from the config.</p>"},{"location":"user-guide/configuration/#migrating-existing-categories","title":"Migrating Existing Categories","text":"<p>If you're upgrading from an older version that used emoji icons, you can migrate your TODO app categories to use Nerd Fonts:</p> <pre><code>make migrate-icons\n</code></pre> <p>This will: - Update all categories in the database to use Nerd Font icons - Replace emoji (\ud83d\udc64, \ud83d\udcbc, etc.) with Nerd Font equivalents - Preserve category names and descriptions</p> <p>Note: This is a one-time migration. New categories created after installing the icon system will automatically use Nerd Fonts.</p>"},{"location":"user-guide/configuration/#viewing-current-configuration","title":"Viewing Current Configuration","text":"<p>You can view your current configuration at any time:</p> <pre><code>cli-utils config\n</code></pre> <p>This displays: - Configuration directory location - Log level - API timeout - Max retries - Nerd Font support status - Custom configuration file location</p>"},{"location":"user-guide/configuration/#configuration-for-development","title":"Configuration for Development","text":"<p>When developing, you can use a <code>.env</code> file in your project root:</p> <pre><code># .env\nCLI_UTILS_LOG_LEVEL=DEBUG\nCLI_UTILS_API_TIMEOUT=120\n</code></pre> <p>The <code>.env</code> file is automatically loaded when the application starts.</p>"},{"location":"user-guide/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Never commit sensitive data: Keep API tokens and credentials in environment variables or local config files</li> <li>Use .env for development: Store development settings in <code>.env</code> (add it to <code>.gitignore</code>)</li> <li>Document custom settings: If you add custom configuration options, document them</li> <li>Provide defaults: Always provide sensible defaults for optional settings</li> </ol>"}]}